From c9a4a0b8d34f11966e3f7a2b39a6a1b8648c886b Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Wed, 6 Nov 2024 15:53:35 -0800
Subject: [PATCH 01/29] Apply as-found a5e87a39 patch

---
 src/realm/CMakeLists.txt                      | 10 +++-
 src/realm/sync/CMakeLists.txt                 |  2 +
 src/realm/sync/network/network_ssl.cpp        | 48 ++++++++++++---
 src/realm/sync/network/network_ssl.hpp        | 60 ++++++++++++++++++-
 src/realm/sync/noinst/server/CMakeLists.txt   |  2 +-
 .../noinst/server/crypto_server_openssl.cpp   | 11 ++++
 src/realm/util/aes_cryptor.hpp                | 11 ++++
 src/realm/util/config.h.in                    |  1 +
 src/realm/util/sha_crypto.cpp                 | 11 ++++
 9 files changed, 142 insertions(+), 14 deletions(-)

diff --git a/src/realm/CMakeLists.txt b/src/realm/CMakeLists.txt
index c991e8dfe90..12c981ab739 100644
--- a/src/realm/CMakeLists.txt
+++ b/src/realm/CMakeLists.txt
@@ -337,7 +337,7 @@ target_include_directories(Storage INTERFACE
 
 # On systems without a built-in SHA-1 implementation (or one provided by a dependency)
 # we need to bundle the public domain implementation.
-if(NOT APPLE AND NOT CMAKE_SYSTEM_NAME MATCHES "^Windows" AND NOT REALM_HAVE_OPENSSL)
+if(NOT APPLE AND NOT CMAKE_SYSTEM_NAME MATCHES "^Windows" AND NOT REALM_HAVE_OPENSSL AND NOT REALM_HAVE_WOLFSSL)
     add_library(sha1 OBJECT ../external/sha-1/sha1.c)
     target_include_directories(Storage PRIVATE ../external/sha-1)
     target_sources(Storage PRIVATE $<TARGET_OBJECTS:sha1>)
@@ -346,7 +346,7 @@ endif()
 # On systems without a built-in SHA-2 implementation (or one provided by a dependency)
 # we need to bundle the public domain implementation.
 # Note: This is also used on Windows because Windows lacks a native SHA224 hash needed for realm encryption
-if(NOT APPLE AND NOT REALM_HAVE_OPENSSL OR WIN32)
+if(NOT APPLE AND NOT REALM_HAVE_OPENSSL AND NOT REALM_HAVE_WOLFSSL OR WIN32)
     add_library(sha2 OBJECT ../external/sha-2/sha224.cpp ../external/sha-2/sha256.cpp)
     target_include_directories(Storage PRIVATE ../external/sha-2)
     target_sources(Storage PRIVATE $<TARGET_OBJECTS:sha2>)
@@ -376,7 +376,11 @@ if(TARGET Backtrace::Backtrace)
 endif()
 
 if(REALM_ENABLE_ENCRYPTION AND UNIX AND NOT APPLE AND REALM_HAVE_OPENSSL)
-    target_link_libraries(Storage PUBLIC OpenSSL::Crypto)
+    if (REALM_HAVE_WOLFSSL)
+        target_link_libraries(Storage PUBLIC WolfSSL)
+    elseif (REALM_HAVE_OPENSSL)
+        target_link_libraries(Storage PUBLIC OpenSSL::Crypto)
+    endif()
 endif()
 
 # Use Zlib if the imported target is defined, otherise use -lz on Apple platforms
diff --git a/src/realm/sync/CMakeLists.txt b/src/realm/sync/CMakeLists.txt
index afa711d9e04..abf682ef5d0 100644
--- a/src/realm/sync/CMakeLists.txt
+++ b/src/realm/sync/CMakeLists.txt
@@ -103,6 +103,8 @@ target_link_libraries(Sync PUBLIC Storage)
 
 if(APPLE AND NOT REALM_FORCE_OPENSSL)
     target_link_options(Sync INTERFACE "SHELL:-framework Security")
+elseif(REALM_HAVE_WOLFSSL)
+    target_link_libraries(Sync PUBLIC WolfSSL)
 elseif(REALM_HAVE_OPENSSL)
     target_link_libraries(Sync PUBLIC OpenSSL::SSL)
 endif()
diff --git a/src/realm/sync/network/network_ssl.cpp b/src/realm/sync/network/network_ssl.cpp
index 58c2fcd960c..86e989b57ba 100644
--- a/src/realm/sync/network/network_ssl.cpp
+++ b/src/realm/sync/network/network_ssl.cpp
@@ -6,7 +6,7 @@
 #include <realm/util/features.h>
 #include <realm/sync/network/network_ssl.hpp>
 
-#if REALM_HAVE_OPENSSL
+#if REALM_HAVE_OPENSSL || REALM_HAVE_WOLFSSL
 #ifdef _WIN32
 #include <Windows.h>
 #else
@@ -14,6 +14,9 @@
 #endif
 #include <openssl/conf.h>
 #include <openssl/x509v3.h>
+#if REALM_HAVE_WOLFSSL
+    #include <openssl/ssl.h>
+#endif
 #elif REALM_HAVE_SECURE_TRANSPORT
 #include <fstream>
 #include <vector>
@@ -65,7 +68,8 @@ void populate_cert_store_with_included_certs(X509_STORE* store, std::error_code&
 #endif // REALM_INCLUDE_CERTS
 
 
-#if REALM_HAVE_OPENSSL && (OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER))
+#if REALM_HAVE_WOLFSSL || \
+    (REALM_HAVE_OPENSSL && (OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)))
 
 // These must be made to execute before main() is called, i.e., before there is
 // any chance of threads being spawned.
@@ -122,9 +126,13 @@ OpensslInit::~OpensslInit()
     EVP_cleanup();
     CRYPTO_cleanup_all_ex_data();
     CONF_modules_unload(1);
+#if REALM_HAVE_WOLFSSL
+    wolfSSL_Cleanup();
+#endif
 }
 
-#endif // REALM_HAVE_OPENSSL && (OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER))
+#endif // REALM_HAVE_WOLFSSL || (REALM_HAVE_OPENSSL && (OPENSSL_VERSION_NUMBER < 0x10100000L ||
+       // defined(LIBRESSL_VERSION_NUMBER)))
 
 } // unnamed namespace
 
@@ -276,6 +284,11 @@ void Context::ssl_init()
     options |= SSL_OP_NO_COMPRESSION;
     SSL_CTX_set_options(ssl_ctx, options);
 
+#if REALM_HAVE_WOLFSSL
+    // mimic default OpenSSL behavior
+    SSL_CTX_set_verify(ssl_ctx, static_cast<int>(VerifyMode::none), nullptr);
+#endif
+
     m_ssl_ctx = ssl_ctx;
 }
 
@@ -390,6 +403,16 @@ class Stream::BioMethod {
 
     BioMethod()
     {
+#if REALM_HAVE_WOLFSSL
+        bio_method = new BIO_METHOD();
+        bio_method->type = WOLFSSL_BIO_UNDEF;       // byte type
+        bio_method->writeCb = &Stream::bio_write;   // int (*writeCb)(BIO*, const char*, int)
+        bio_method->readCb = &Stream::bio_read;     // int (*readCb)(BIO*, char*, int)
+        bio_method->putsCb = &Stream::bio_puts;     // int (*putsCb)(BIO*, const char*)
+        bio_method->ctrlCb = &Stream::bio_ctrl;     // long (*ctrlCb)(BIO*, int, long, void*)
+        bio_method->createCb = &Stream::bio_create; // int (*createCb)(BIO*)
+        bio_method->freeCb = &Stream::bio_destroy;  // int (*freeCb)(BIO*)
+#else
         bio_method = new BIO_METHOD{
             BIO_TYPE_SOCKET,      // int type
             nullptr,              // const char* name
@@ -402,6 +425,7 @@ class Stream::BioMethod {
             &Stream::bio_destroy, // int (*destroy)(BIO*)
             nullptr               // long (*callback_ctrl)(BIO*, int, bio_info_cb*)
         };
+#endif
     }
 
     ~BioMethod()
@@ -475,7 +499,7 @@ bool check_san(X509* server_cert, const std::string& host_name)
 
         if (current_name->type == GEN_DNS) {
             // Current name is a DNS name
-            char* dns_name = static_cast<char*>(ASN1_STRING_data(current_name->d.dNSName));
+            char* dns_name = reinterpret_cast<char*>(ASN1_STRING_data(current_name->d.dNSName));
 
             // Make sure there isn't an embedded NUL character in the DNS name
             if (static_cast<std::size_t>(ASN1_STRING_length(current_name->d.dNSName)) != std::strlen(dns_name))
@@ -682,7 +706,9 @@ void Stream::ssl_init()
         throw std::system_error(ec);
     }
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+#if REALM_HAVE_WOLFSSL || \
+    OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+
     BIO_set_data(bio, this);
 #else
     bio->ptr = this;
@@ -701,7 +727,9 @@ void Stream::ssl_destroy() noexcept
 
 int Stream::bio_write(BIO* bio, const char* data, int size) noexcept
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+#if REALM_HAVE_WOLFSSL || \
+    OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+
     Stream& stream = *static_cast<Stream*>(BIO_get_data(bio));
 #else
     Stream& stream = *static_cast<Stream*>(bio->ptr);
@@ -725,7 +753,9 @@ int Stream::bio_write(BIO* bio, const char* data, int size) noexcept
 
 int Stream::bio_read(BIO* bio, char* buffer, int size) noexcept
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+#if REALM_HAVE_WOLFSSL || \
+    OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+
     Stream& stream = *static_cast<Stream*>(BIO_get_data(bio));
 #else
     Stream& stream = *static_cast<Stream*>(bio->ptr);
@@ -784,7 +814,9 @@ long Stream::bio_ctrl(BIO*, int cmd, long, void*) noexcept
 
 int Stream::bio_create(BIO* bio) noexcept
 {
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+#if REALM_HAVE_WOLFSSL || \
+    OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
+
     BIO_set_init(bio, 1);
     BIO_set_data(bio, nullptr);
     BIO_clear_flags(bio, 0);
diff --git a/src/realm/sync/network/network_ssl.hpp b/src/realm/sync/network/network_ssl.hpp
index abdd8431195..d5f1153570e 100644
--- a/src/realm/sync/network/network_ssl.hpp
+++ b/src/realm/sync/network/network_ssl.hpp
@@ -15,6 +15,17 @@
 #include <realm/util/optional.hpp>
 #include <realm/util/logger.hpp>
 
+#if REALM_HAVE_WOLFSSL
+    #ifdef HAVE_CONFIG_H
+        #include <config.h>
+    #endif
+    #ifndef WOLFSSL_USER_SETTINGS
+        #include <wolfssl/options.h>
+    #else
+        #include <wolfssl/wolfcrypt/settings.h>
+    #endif
+#endif /* REALM_HAVE_WOLFSSL */
+
 #if REALM_HAVE_OPENSSL
 #include <openssl/ssl.h>
 #include <openssl/err.h>
@@ -479,6 +490,10 @@ class Stream {
     template <class Oper>
     std::size_t ssl_perform(Oper oper, std::error_code& ec, Want& want) noexcept;
 
+#if REALM_HAVE_WOLFSSL
+    static void ssl_map_wolfssl_error_codes(int& ret, int& ssl_error, int& sys_error) noexcept;
+#endif
+
     int do_ssl_accept() noexcept;
     int do_ssl_connect() noexcept;
     int do_ssl_shutdown() noexcept;
@@ -1141,11 +1156,15 @@ std::size_t Stream::ssl_perform(Oper oper, std::error_code& ec, Want& want) noex
     int ssl_error = SSL_get_error(m_ssl, ret);
     int sys_error = int(ERR_peek_last_error());
 
+#if REALM_HAVE_WOLFSSL
+    REALM_ASSERT(!m_bio_error_code || ssl_error == SOCKET_ERROR_E || ssl_error == SOCKET_PEER_CLOSED_E);
+
+    ssl_map_wolfssl_error_codes(ret, ssl_error, sys_error);
+#else
     // Guaranteed by the documentation of SSL_get_error()
     REALM_ASSERT((ret > 0) == (ssl_error == SSL_ERROR_NONE));
-
     REALM_ASSERT(!m_bio_error_code || ssl_error == SSL_ERROR_SYSCALL);
-
+#endif
     // Judging from various comments in the man pages, and from experience with
     // the API, it seems that,
     //
@@ -1233,6 +1252,43 @@ std::size_t Stream::ssl_perform(Oper oper, std::error_code& ec, Want& want) noex
     return 0;
 }
 
+#if REALM_HAVE_WOLFSSL
+inline void Stream::ssl_map_wolfssl_error_codes(int& ret, int& ssl_error, int& sys_error) noexcept
+{
+    // Map some common wolfSSL error codes to OpenSSL ones
+    // wolfSSL returns a more specific error codes for issues than openSSL's simple
+    // "ssl error" and "syscall error", however realm's tests and some business logic
+    // are written with OpenSSLs errors in mind, so we map them here to be non-intrusive
+    if (ret == WOLFSSL_FATAL_ERROR) {
+        switch (ssl_error) {
+            case SOCKET_ERROR_E:
+                ssl_error = SSL_ERROR_SYSCALL;
+                sys_error = 0;
+                break;
+            case VERIFY_CERT_ERROR:
+            case FATAL_ERROR:
+            case ASN_NO_SIGNER_E:
+                ssl_error = SSL_ERROR_SSL;
+                sys_error = 0;
+                break;
+            default:
+                break;
+        }
+    }
+    else if (ret == WOLFSSL_ERROR_NONE && ssl_error != WOLFSSL_ERROR_NONE) {
+        switch (ssl_error) {
+            case SOCKET_PEER_CLOSED_E:
+                ret = WOLFSSL_FATAL_ERROR;
+                ssl_error = SSL_ERROR_SYSCALL;
+                sys_error = 0;
+                break;
+            default:
+                break;
+        }
+    }
+}
+#endif
+
 inline int Stream::do_ssl_accept() noexcept
 {
     int ret = SSL_accept(m_ssl);
diff --git a/src/realm/sync/noinst/server/CMakeLists.txt b/src/realm/sync/noinst/server/CMakeLists.txt
index a650c484018..f0fc05eaad7 100644
--- a/src/realm/sync/noinst/server/CMakeLists.txt
+++ b/src/realm/sync/noinst/server/CMakeLists.txt
@@ -31,7 +31,7 @@ target_link_libraries(SyncServer PUBLIC Sync QueryParser)
 
 if(APPLE AND NOT REALM_FORCE_OPENSSL)
     target_sources(SyncServer PRIVATE crypto_server_apple.mm)
-elseif(REALM_HAVE_OPENSSL)
+elseif(REALM_HAVE_OPENSSL OR REALM_HAVE_WOLFSSL)
     target_sources(SyncServer PRIVATE crypto_server_openssl.cpp)
 else()
     target_sources(SyncServer PRIVATE crypto_server_stub.cpp)
diff --git a/src/realm/sync/noinst/server/crypto_server_openssl.cpp b/src/realm/sync/noinst/server/crypto_server_openssl.cpp
index 559e11cbe2a..efb802608c2 100644
--- a/src/realm/sync/noinst/server/crypto_server_openssl.cpp
+++ b/src/realm/sync/noinst/server/crypto_server_openssl.cpp
@@ -1,5 +1,16 @@
 #include <realm/sync/noinst/server/crypto_server.hpp>
 
+#if REALM_HAVE_WOLFSSL
+    #ifdef HAVE_CONFIG_H
+        #include <config.h>
+    #endif
+    #ifndef WOLFSSL_USER_SETTINGS
+        #include <wolfssl/options.h>
+    #else
+        #include <wolfssl/wolfcrypt/settings.h>
+    #endif
+#endif /* REALM_HAVE_WOLFSSL */
+
 #include <openssl/bio.h>
 #include <openssl/pem.h>
 #include <openssl/evp.h>
diff --git a/src/realm/util/aes_cryptor.hpp b/src/realm/util/aes_cryptor.hpp
index d9f8da87fc2..0a123166925 100644
--- a/src/realm/util/aes_cryptor.hpp
+++ b/src/realm/util/aes_cryptor.hpp
@@ -54,6 +54,17 @@ class WriteMarker {
 #include <bcrypt.h>
 #pragma comment(lib, "bcrypt.lib")
 #else
+#if REALM_HAVE_WOLFSSL
+    #ifdef HAVE_CONFIG_H
+        #include <config.h>
+    #endif
+    #ifndef WOLFSSL_USER_SETTINGS
+        #include <wolfssl/options.h>
+    #else
+        #include <wolfssl/wolfcrypt/settings.h>
+    #endif
+#endif /* REALM_HAVE_WOLFSSL */
+
 #include <openssl/sha.h>
 #include <openssl/evp.h>
 #endif
diff --git a/src/realm/util/config.h.in b/src/realm/util/config.h.in
index 36a7e099051..a1dd8d44dc3 100644
--- a/src/realm/util/config.h.in
+++ b/src/realm/util/config.h.in
@@ -5,6 +5,7 @@
 #cmakedefine01 REALM_HAVE_READDIR64
 #cmakedefine01 REALM_HAVE_POSIX_FALLOCATE
 #cmakedefine01 REALM_HAVE_OPENSSL
+#cmakedefine01 REALM_HAVE_WOLFSSL
 #cmakedefine01 REALM_HAVE_SECURE_TRANSPORT
 #cmakedefine01 REALM_HAVE_PTHREAD_GETNAME
 #cmakedefine01 REALM_HAVE_PTHREAD_SETNAME
diff --git a/src/realm/util/sha_crypto.cpp b/src/realm/util/sha_crypto.cpp
index e73fcad98dd..51530ebe900 100644
--- a/src/realm/util/sha_crypto.cpp
+++ b/src/realm/util/sha_crypto.cpp
@@ -37,6 +37,17 @@
 #define REALM_USE_BUNDLED_SHA2 1
 #endif
 
+#if REALM_HAVE_WOLFSSL
+    #ifdef HAVE_CONFIG_H
+        #include <config.h>
+    #endif
+    #ifndef WOLFSSL_USER_SETTINGS
+        #include <wolfssl/options.h>
+    #else
+        #include <wolfssl/wolfcrypt/settings.h>
+    #endif
+#endif /* REALM_HAVE_WOLFSSL */
+
 #ifdef REALM_USE_BUNDLED_SHA2
 #include <sha224.hpp>
 #include <sha256.hpp>

From 4c2d7f18e1240a6c1b15a9f80cde507735f9c871 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Wed, 6 Nov 2024 16:39:31 -0800
Subject: [PATCH 02/29] ignore build & breadcrumb files

---
 .gitignore | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/.gitignore b/.gitignore
index 8fd4a65df13..4406de92807 100644
--- a/.gitignore
+++ b/.gitignore
@@ -107,3 +107,9 @@ tsconfig.tsbuildinfo
 # Baas remote host artifacts
 baas-work-dir/
 ssh_agent_commands.sh
+
+# Ignore output build
+**/out/build/**
+
+# Ignore breadcrumb / semaphore files
+/REALM_CORE_COMMIT_COMPLETE.log

From 10021ab255277056a6f92fabd02e6ff7960e1498 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 09:43:02 -0800
Subject: [PATCH 03/29] WIP REALM_HAVE_WOLFSSL

---
 CMakeLists.txt                                    | 10 +++++++++-
 src/realm/sync/CMakeLists.txt                     |  4 +++-
 src/realm/sync/network/network_ssl.cpp            | 11 ++++++++---
 src/realm/sync/network/network_ssl.hpp            |  7 +++++--
 .../sync/noinst/server/crypto_server_openssl.cpp  | 10 +++++-----
 src/realm/util/aes_cryptor.hpp                    |  6 ++++--
 src/realm/util/sha_crypto.cpp                     | 15 ++++++++++++---
 7 files changed, 46 insertions(+), 17 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1b67258aba8..20d28035572 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -305,6 +305,7 @@ elseif(REALM_ENABLE_ENCRYPTION AND CMAKE_SYSTEM_NAME MATCHES "Linux|Android")
     set(REALM_NEEDS_OPENSSL TRUE)
 endif()
 
+if(NOT REALM_HAVE_WOLFSSL)
 if(REALM_NEEDS_OPENSSL OR REALM_FORCE_OPENSSL)
     if(NOT REALM_USE_SYSTEM_OPENSSL AND (ANDROID OR WIN32 OR CMAKE_SYSTEM_NAME STREQUAL "Linux"))
         # Use our own prebuilt OpenSSL
@@ -318,10 +319,12 @@ if(REALM_NEEDS_OPENSSL OR REALM_FORCE_OPENSSL)
     endif()
     find_package(OpenSSL REQUIRED)
     set(REALM_HAVE_OPENSSL ON)
+    message(STATUS "\nALERT: REALM_HAVE_OPENSSL set ON")
     string(REGEX MATCH "^([0-9]+)\\.([0-9]+)" OPENSSL_VERSION_MAJOR_MINOR "${OPENSSL_VERSION}")
 elseif(APPLE)
     set(REALM_HAVE_SECURE_TRANSPORT "1")
 endif()
+endif()
 
 # Use Zlib for Sync, but allow integrators to override it
 # Don't use find_library(ZLIB) on Apple platforms - it hardcodes the path per platform,
@@ -363,10 +366,15 @@ set(JSON_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/json)
 include_directories(src)
 include_directories(${CMAKE_CURRENT_BINARY_DIR}/src) # For generated files (like config.h)
 
+if (REALM_HAVE_WOLFSSL)
+    message(STATUS "Found REALM_HAVE_WOLFSSL")
+    include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr")
+endif()
+
 add_subdirectory(src)
 add_subdirectory(bindgen)
 
-# Install the licence and changelog files
+# Install the license and changelog files
 install(FILES LICENSE CHANGELOG.md DESTINATION "doc/realm" COMPONENT devel)
 
 # Only prepare test/install/package targets if we're not a submodule
diff --git a/src/realm/sync/CMakeLists.txt b/src/realm/sync/CMakeLists.txt
index abf682ef5d0..4c103d4fe8f 100644
--- a/src/realm/sync/CMakeLists.txt
+++ b/src/realm/sync/CMakeLists.txt
@@ -104,8 +104,10 @@ target_link_libraries(Sync PUBLIC Storage)
 if(APPLE AND NOT REALM_FORCE_OPENSSL)
     target_link_options(Sync INTERFACE "SHELL:-framework Security")
 elseif(REALM_HAVE_WOLFSSL)
+    message(STATUS "REALM_HAVE_WOLFSSL")
     target_link_libraries(Sync PUBLIC WolfSSL)
 elseif(REALM_HAVE_OPENSSL)
+    message(STATUS "REALM_HAVE_OPENSSL")
     target_link_libraries(Sync PUBLIC OpenSSL::SSL)
 endif()
 
@@ -113,7 +115,7 @@ if(WIN32 AND NOT WINDOWS_STORE)
     target_link_libraries(Sync INTERFACE Version.lib)
     if(CMAKE_VERSION VERSION_LESS "3.21")
         # This is needed for OpenSSL, but CMake's FindOpenSSL didn't declare it
-        # on the OpenSSL::Crypto target until CMake 3.21.0. 
+        # on the OpenSSL::Crypto target until CMake 3.21.0.
         target_link_libraries(Sync INTERFACE Crypt32.lib)
     endif()
 endif()
diff --git a/src/realm/sync/network/network_ssl.cpp b/src/realm/sync/network/network_ssl.cpp
index 86e989b57ba..507a7fd2f2d 100644
--- a/src/realm/sync/network/network_ssl.cpp
+++ b/src/realm/sync/network/network_ssl.cpp
@@ -12,10 +12,12 @@
 #else
 #include <pthread.h>
 #endif
-#include <openssl/conf.h>
-#include <openssl/x509v3.h>
+#include <wolfssl/openssl/conf.h>
+#include <wolfssl/openssl/x509v3.h>
 #if REALM_HAVE_WOLFSSL
-    #include <openssl/ssl.h>
+    #pragma message "network_ssl.cpp found REALM_HAVE_WOLFSSL"
+    //#include <openssl/ssl.h>
+    #include <wolfssl/openssl/ssl.h>
 #endif
 #elif REALM_HAVE_SECURE_TRANSPORT
 #include <fstream>
@@ -127,7 +129,10 @@ OpensslInit::~OpensslInit()
     CRYPTO_cleanup_all_ex_data();
     CONF_modules_unload(1);
 #if REALM_HAVE_WOLFSSL
+    printf("Calling wolfSSL_Cleanup")
     wolfSSL_Cleanup();
+#else
+    printf("REALM_HAVE_WOLFSSL not defined")
 #endif
 }
 
diff --git a/src/realm/sync/network/network_ssl.hpp b/src/realm/sync/network/network_ssl.hpp
index d5f1153570e..83865aa20a9 100644
--- a/src/realm/sync/network/network_ssl.hpp
+++ b/src/realm/sync/network/network_ssl.hpp
@@ -24,11 +24,14 @@
     #else
         #include <wolfssl/wolfcrypt/settings.h>
     #endif
+    #include <wolfssl/openssl/ssl.h>
+    #include <wolfssl/error-ssl.h>
 #endif /* REALM_HAVE_WOLFSSL */
 
 #if REALM_HAVE_OPENSSL
-#include <openssl/ssl.h>
-#include <openssl/err.h>
+// oops
+// #include <openssl/ssl.h>
+//#include <openssl/err.h>
 #elif REALM_HAVE_SECURE_TRANSPORT
 #include <realm/util/cf_ptr.hpp>
 #include <Security/Security.h>
diff --git a/src/realm/sync/noinst/server/crypto_server_openssl.cpp b/src/realm/sync/noinst/server/crypto_server_openssl.cpp
index efb802608c2..4b96f0d01e2 100644
--- a/src/realm/sync/noinst/server/crypto_server_openssl.cpp
+++ b/src/realm/sync/noinst/server/crypto_server_openssl.cpp
@@ -11,14 +11,14 @@
     #endif
 #endif /* REALM_HAVE_WOLFSSL */
 
-#include <openssl/bio.h>
-#include <openssl/pem.h>
-#include <openssl/evp.h>
+#include <wolfssl/openssl/bio.h>
+#include <wolfssl/openssl/pem.h>
+#include <wolfssl/openssl/evp.h>
 
 #if OPENSSL_VERSION_MAJOR >= 3
-#include <openssl/decoder.h>
+#include <wolfssl/openssl/decoder.h>
 #else
-#include <openssl/rsa.h>
+#include <wolfssl/openssl/rsa.h>
 #endif
 
 using namespace realm;
diff --git a/src/realm/util/aes_cryptor.hpp b/src/realm/util/aes_cryptor.hpp
index 0a123166925..11e0b6a9a23 100644
--- a/src/realm/util/aes_cryptor.hpp
+++ b/src/realm/util/aes_cryptor.hpp
@@ -65,8 +65,10 @@ class WriteMarker {
     #endif
 #endif /* REALM_HAVE_WOLFSSL */
 
-#include <openssl/sha.h>
-#include <openssl/evp.h>
+// #include <openssl/sha.h>
+// #include <openssl/evp.h>
+#include <wolfssl/openssl/evp.h>
+#include <wolfssl/openssl/sha.h>
 #endif
 
 namespace realm::util {
diff --git a/src/realm/util/sha_crypto.cpp b/src/realm/util/sha_crypto.cpp
index 51530ebe900..efb7ea33e00 100644
--- a/src/realm/util/sha_crypto.cpp
+++ b/src/realm/util/sha_crypto.cpp
@@ -29,9 +29,10 @@
 #pragma comment(lib, "bcrypt.lib")
 #define REALM_USE_BUNDLED_SHA2 1
 #elif REALM_HAVE_OPENSSL
-#include <openssl/sha.h>
-#include <openssl/evp.h>
-#include <openssl/hmac.h>
+oops
+//#include <openssl/sha.h>
+//#include <openssl/evp.h>
+//#include <openssl/hmac.h>
 #else
 #include <sha1.h>
 #define REALM_USE_BUNDLED_SHA2 1
@@ -46,6 +47,14 @@
     #else
         #include <wolfssl/wolfcrypt/settings.h>
     #endif
+    #include <wolfssl/openssl/sha.h>
+    #ifndef WOLFSSL_EVP_INCLUDED
+        #error "WOLFSSL_EVP_INCLUDED needed"
+    #endif
+    #include <wolfssl/openssl/evp.h>
+    #include <wolfssl/openssl/hmac.h>
+    #include <wolfssl/openssl/sha.h>
+    #include <wolfssl/openssl/hmac.h>
 #endif /* REALM_HAVE_WOLFSSL */
 
 #ifdef REALM_USE_BUNDLED_SHA2

From d2e7cbd371151b6304e3b11accd071cd4e252d5c Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 11:43:57 -0800
Subject: [PATCH 04/29] WIP network_ssl wolfssl

---
 src/realm/sync/network/network_ssl.cpp | 39 +++++++++++++++-----------
 src/realm/sync/network/network_ssl.hpp | 23 +++++++--------
 2 files changed, 35 insertions(+), 27 deletions(-)

diff --git a/src/realm/sync/network/network_ssl.cpp b/src/realm/sync/network/network_ssl.cpp
index 507a7fd2f2d..91c346e3f45 100644
--- a/src/realm/sync/network/network_ssl.cpp
+++ b/src/realm/sync/network/network_ssl.cpp
@@ -7,21 +7,26 @@
 #include <realm/sync/network/network_ssl.hpp>
 
 #if REALM_HAVE_OPENSSL || REALM_HAVE_WOLFSSL
-#ifdef _WIN32
-#include <Windows.h>
-#else
-#include <pthread.h>
-#endif
-#include <wolfssl/openssl/conf.h>
-#include <wolfssl/openssl/x509v3.h>
-#if REALM_HAVE_WOLFSSL
-    #pragma message "network_ssl.cpp found REALM_HAVE_WOLFSSL"
-    //#include <openssl/ssl.h>
-    #include <wolfssl/openssl/ssl.h>
-#endif
+    #ifdef _WIN32
+        #include <Windows.h>
+    #else
+        #include <pthread.h>
+    #endif
+
+    #if REALM_HAVE_OPENSSL
+        #include <openssl/ssl.h>
+        #include <openssl/conf.h>
+        #include <openssl/x509v3.h>
+    #endif
+    #if REALM_HAVE_WOLFSSL
+        // #pragma message "network_ssl.cpp found REALM_HAVE_WOLFSSL"
+        #include <wolfssl/openssl/ssl.h>
+        #include <wolfssl/openssl/conf.h>
+        #include <wolfssl/openssl/x509v3.h>
+    #endif
 #elif REALM_HAVE_SECURE_TRANSPORT
-#include <fstream>
-#include <vector>
+    #include <fstream>
+    #include <vector>
 #endif
 
 using namespace realm;
@@ -129,10 +134,12 @@ OpensslInit::~OpensslInit()
     CRYPTO_cleanup_all_ex_data();
     CONF_modules_unload(1);
 #if REALM_HAVE_WOLFSSL
-    printf("Calling wolfSSL_Cleanup")
+    // TODO remove breadcrumb
+    printf("Calling wolfSSL_Cleanup");
     wolfSSL_Cleanup();
 #else
-    printf("REALM_HAVE_WOLFSSL not defined")
+    // TODO remove breadcrumb
+    printf("REALM_HAVE_WOLFSSL not defined");
 #endif
 }
 
diff --git a/src/realm/sync/network/network_ssl.hpp b/src/realm/sync/network/network_ssl.hpp
index 83865aa20a9..87a2d309c9d 100644
--- a/src/realm/sync/network/network_ssl.hpp
+++ b/src/realm/sync/network/network_ssl.hpp
@@ -15,7 +15,14 @@
 #include <realm/util/optional.hpp>
 #include <realm/util/logger.hpp>
 
-#if REALM_HAVE_WOLFSSL
+#if REALM_HAVE_OPENSSL && REALM_HAVE_WOLFSSL
+    #error "Both OpenSSL and wolfSSL enabled. Pick one."
+#endif
+
+#if REALM_HAVE_OPENSSL
+    #include <openssl/ssl.h>
+    #include <openssl/err.h>
+#elif REALM_HAVE_WOLFSSL
     #ifdef HAVE_CONFIG_H
         #include <config.h>
     #endif
@@ -26,19 +33,13 @@
     #endif
     #include <wolfssl/openssl/ssl.h>
     #include <wolfssl/error-ssl.h>
-#endif /* REALM_HAVE_WOLFSSL */
 
-#if REALM_HAVE_OPENSSL
-// oops
-// #include <openssl/ssl.h>
-//#include <openssl/err.h>
 #elif REALM_HAVE_SECURE_TRANSPORT
-#include <realm/util/cf_ptr.hpp>
-#include <Security/Security.h>
-#include <Security/SecureTransport.h>
-
-#define REALM_HAVE_KEYCHAIN_APIS (TARGET_OS_MAC && !TARGET_OS_IPHONE)
+    #include <realm/util/cf_ptr.hpp>
+    #include <Security/Security.h>
+    #include <Security/SecureTransport.h>
 
+    #define REALM_HAVE_KEYCHAIN_APIS (TARGET_OS_MAC && !TARGET_OS_IPHONE)
 #endif
 
 // FIXME: Add necessary support for customizing the SSL server and client

From 9866ca8912c979d5fdad1fa93a01aae5215b26b6 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 11:45:51 -0800
Subject: [PATCH 05/29] VS 2022

---
 CMakeSettings.json | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/CMakeSettings.json b/CMakeSettings.json
index 9ba4f52c92d..fd8d823a25e 100644
--- a/CMakeSettings.json
+++ b/CMakeSettings.json
@@ -2,7 +2,7 @@
   "configurations": [
     {
       "name": "x64-Debug",
-      "generator": "Visual Studio 16 2019 Win64",
+      "generator": "Visual Studio 17 2022 Win64",
       "configurationType": "Debug",
       "inheritEnvironments": [ "msvc_x64_x64" ],
       "buildRoot": "${projectDir}\\out\\build\\${name}",

From d702dc296191fa3b930a99bcd1eb2dbd5b6becca Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 11:46:40 -0800
Subject: [PATCH 06/29] WIP with hard-coded paths

---
 CMakeLists.txt | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 20d28035572..d205533b932 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,6 @@
 cmake_minimum_required(VERSION 3.15)
 message(STATUS "CMake version: ${CMAKE_VERSION}")
-
+set(CMAKE_SYSTEM_VERSION 10.0.22621.0)
 set(CMAKE_BUILD_TYPE Debug CACHE STRING "")
 project(RealmCore)
 
@@ -371,6 +371,10 @@ if (REALM_HAVE_WOLFSSL)
     include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr")
 endif()
 
+# TODO fix hard coded paths
+include_directories("/mnt/c/workspace/osp-gojimmypi/realm/realm-core-gojimmypi/src")
+include_directories("/mnt/c/workspace/osp-gojimmypi/realm/realm-core-gojimmypi/src/realm/object-store/c_api")
+
 add_subdirectory(src)
 add_subdirectory(bindgen)
 

From 3ec59f7cc79e97eccce9bc6843e42947b8a2447b Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 11:47:30 -0800
Subject: [PATCH 07/29] Target platform=10.0.22621.0, toolset=v143

---
 Visual Studio/uwp_demo/App1.vcxproj | 16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

diff --git a/Visual Studio/uwp_demo/App1.vcxproj b/Visual Studio/uwp_demo/App1.vcxproj
index e9cb9256faa..5a1f9961703 100644
--- a/Visual Studio/uwp_demo/App1.vcxproj	
+++ b/Visual Studio/uwp_demo/App1.vcxproj	
@@ -7,8 +7,8 @@
     <MinimumVisualStudioVersion>14.0</MinimumVisualStudioVersion>
     <AppContainerApplication>true</AppContainerApplication>
     <ApplicationType>Windows Store</ApplicationType>
-    <WindowsTargetPlatformVersion>10.0.10586.0</WindowsTargetPlatformVersion>
-    <WindowsTargetPlatformMinVersion>10.0.10240.0</WindowsTargetPlatformMinVersion>
+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
+    <WindowsTargetPlatformMinVersion>10.0.22621.0</WindowsTargetPlatformMinVersion>
     <ApplicationTypeRevision>10.0</ApplicationTypeRevision>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
@@ -41,32 +41,32 @@
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v143</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|ARM'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v143</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>true</UseDebugLibraries>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v143</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v143</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|ARM'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v143</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
     <UseDebugLibraries>false</UseDebugLibraries>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v143</PlatformToolset>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">

From e1b667f9072503bf169de7c18f68ac541d3bb4c7 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 11:48:09 -0800
Subject: [PATCH 08/29] check for REALM_HAVE_OPENSSL && REALM_HAVE_WOLFSSL

---
 src/realm/sync/network/network_ssl.cpp | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/realm/sync/network/network_ssl.cpp b/src/realm/sync/network/network_ssl.cpp
index 91c346e3f45..f0b72d80985 100644
--- a/src/realm/sync/network/network_ssl.cpp
+++ b/src/realm/sync/network/network_ssl.cpp
@@ -6,6 +6,10 @@
 #include <realm/util/features.h>
 #include <realm/sync/network/network_ssl.hpp>
 
+#if REALM_HAVE_OPENSSL && REALM_HAVE_WOLFSSL
+    #error "Both OpenSSL and wolfSSL enabled. Pick one."
+#endif
+
 #if REALM_HAVE_OPENSSL || REALM_HAVE_WOLFSSL
     #ifdef _WIN32
         #include <Windows.h>

From d2714c1617cf6e694de381e4510a5bdff2fbe8e9 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 11:48:43 -0800
Subject: [PATCH 09/29] cleanup REALM_HAVE_OPENSSL vs REALM_HAVE_WOLFSSL

---
 .../noinst/server/crypto_server_openssl.cpp   | 30 ++++++++++++-------
 1 file changed, 19 insertions(+), 11 deletions(-)

diff --git a/src/realm/sync/noinst/server/crypto_server_openssl.cpp b/src/realm/sync/noinst/server/crypto_server_openssl.cpp
index 4b96f0d01e2..ac5ba4445a5 100644
--- a/src/realm/sync/noinst/server/crypto_server_openssl.cpp
+++ b/src/realm/sync/noinst/server/crypto_server_openssl.cpp
@@ -1,6 +1,21 @@
 #include <realm/sync/noinst/server/crypto_server.hpp>
 
-#if REALM_HAVE_WOLFSSL
+#if REALM_HAVE_OPENSSL && REALM_HAVE_WOLFSSL
+    #error "Both OpenSSL and wolfSSL enabled. Pick one."
+#endif
+
+#if REALM_HAVE_OPENSSL
+    #include <openssl/bio.h>
+    #include <openssl/pem.h>
+    #include <openssl/evp.h>
+
+    #if OPENSSL_VERSION_MAJOR >= 3
+        #include <openssl/decoder.h>
+    #else
+        #include <openssl/rsa.h>
+    #endif
+
+#elif REALM_HAVE_WOLFSSL
     #ifdef HAVE_CONFIG_H
         #include <config.h>
     #endif
@@ -9,17 +24,10 @@
     #else
         #include <wolfssl/wolfcrypt/settings.h>
     #endif
-#endif /* REALM_HAVE_WOLFSSL */
-
-#include <wolfssl/openssl/bio.h>
-#include <wolfssl/openssl/pem.h>
-#include <wolfssl/openssl/evp.h>
-
-#if OPENSSL_VERSION_MAJOR >= 3
-#include <wolfssl/openssl/decoder.h>
 #else
-#include <wolfssl/openssl/rsa.h>
-#endif
+    #error "Neiher REALM_HAVE_WOLFSSL nor REALM_HAVE_OPENSSL defined. Pick one."
+
+#endif /* REALM_HAVE_WOLFSSL */
 
 using namespace realm;
 using namespace realm::sync;

From 2f7d6168c5a101c432a1287f74e73d0b0c934ecc Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 12:00:35 -0800
Subject: [PATCH 10/29] WIP aes_cryptor

---
 src/realm/util/aes_cryptor.hpp | 31 ++++++++++++++++++-------------
 1 file changed, 18 insertions(+), 13 deletions(-)

diff --git a/src/realm/util/aes_cryptor.hpp b/src/realm/util/aes_cryptor.hpp
index 11e0b6a9a23..ba0154d11e2 100644
--- a/src/realm/util/aes_cryptor.hpp
+++ b/src/realm/util/aes_cryptor.hpp
@@ -46,15 +46,16 @@ class WriteMarker {
 
 #if REALM_ENABLE_ENCRYPTION
 
+#if REALM_HAVE_OPENSSL && REALM_HAVE_WOLFSSL
+    #error "Both OpenSSL and wolfSSL enabled. Pick one."
+#endif
+
 #if REALM_PLATFORM_APPLE
-#include <CommonCrypto/CommonCrypto.h>
-#elif defined(_WIN32)
-#include <windows.h>
-#include <stdio.h>
-#include <bcrypt.h>
-#pragma comment(lib, "bcrypt.lib")
-#else
-#if REALM_HAVE_WOLFSSL
+    #include <CommonCrypto/CommonCrypto.h>
+#elif REALM_HAVE_OPENSSL
+    #include <openssl/sha.h>
+    #include <openssl/evp.h>
+#elif REALM_HAVE_WOLFSSL
     #ifdef HAVE_CONFIG_H
         #include <config.h>
     #endif
@@ -63,12 +64,16 @@ class WriteMarker {
     #else
         #include <wolfssl/wolfcrypt/settings.h>
     #endif
-#endif /* REALM_HAVE_WOLFSSL */
+    #include <wolfssl/openssl/evp.h>
+    #include <wolfssl/openssl/sha.h>
+#elif defined(_WIN32)
+    #include <windows.h>
+    #include <stdio.h>
+    #include <bcrypt.h>
+    #pragma comment(lib, "bcrypt.lib")
+#else
+    #error "No AES cryptographic provider found"
 
-// #include <openssl/sha.h>
-// #include <openssl/evp.h>
-#include <wolfssl/openssl/evp.h>
-#include <wolfssl/openssl/sha.h>
 #endif
 
 namespace realm::util {

From c46fd3a380630eab2d4311f27ade8eb9537757ec Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 12:10:46 -0800
Subject: [PATCH 11/29] WIP sha_crypto REALM_HAVE_WOLFSSL

---
 src/realm/util/sha_crypto.cpp | 62 +++++++++++++++++++++++++++--------
 1 file changed, 48 insertions(+), 14 deletions(-)

diff --git a/src/realm/util/sha_crypto.cpp b/src/realm/util/sha_crypto.cpp
index efb7ea33e00..d9df87d4e08 100644
--- a/src/realm/util/sha_crypto.cpp
+++ b/src/realm/util/sha_crypto.cpp
@@ -21,21 +21,33 @@
 #include <realm/util/assert.hpp>
 
 #if REALM_PLATFORM_APPLE
-#include <CommonCrypto/CommonCrypto.h>
+    #include <CommonCrypto/CommonCrypto.h>
 #elif defined(_WIN32)
-#include <windows.h>
-#include <stdio.h>
-#include <bcrypt.h>
-#pragma comment(lib, "bcrypt.lib")
-#define REALM_USE_BUNDLED_SHA2 1
+    #include <windows.h>
+    #include <stdio.h>
+    #include <bcrypt.h>
+    #pragma comment(lib, "bcrypt.lib")
+    #define REALM_USE_BUNDLED_SHA2 1
 #elif REALM_HAVE_OPENSSL
-oops
-//#include <openssl/sha.h>
-//#include <openssl/evp.h>
-//#include <openssl/hmac.h>
+    #include <openssl/sha.h>
+    #include <openssl/evp.h>
+    #include <openssl/hmac.h>
+#elif REALM_HAVE_WOLFSSL
+    #ifdef HAVE_CONFIG_H
+        #include <config.h>
+    #endif
+    #ifndef WOLFSSL_USER_SETTINGS
+        #include <wolfssl/options.h>
+    #else
+        #include <wolfssl/wolfcrypt/settings.h>
+    #endif
+
+    #include <wolfssl/openssl/sha.h>
+    #include <wolfssl/openssl/evp.h>
+    #include <wolfssl/openssl/hmac.h>
 #else
-#include <sha1.h>
-#define REALM_USE_BUNDLED_SHA2 1
+    #include <sha1.h>
+    #define REALM_USE_BUNDLED_SHA2 1
 #endif
 
 #if REALM_HAVE_WOLFSSL
@@ -204,6 +216,11 @@ void sha1(const char* in_buffer, size_t in_buffer_size, unsigned char* out_buffe
     unsigned int output_size;
     message_digest(digest_type, in_buffer, in_buffer_size, out_buffer, &output_size);
     REALM_ASSERT(output_size == 20);
+#elif REALM_HAVE_WOLFSSL
+    const EVP_MD* digest_type = EVP_sha1();
+    unsigned int output_size;
+ // TODO   message_digest(digest_type, in_buffer, in_buffer_size, out_buffer, &output_size);
+    REALM_ASSERT(output_size == 20);
 #else
     SHA1(reinterpret_cast<char*>(out_buffer), in_buffer, in_buffer_size);
 #endif
@@ -222,6 +239,11 @@ void sha256(const char* in_buffer, size_t in_buffer_size, unsigned char* out_buf
     unsigned int output_size;
     message_digest(digest_type, in_buffer, in_buffer_size, out_buffer, &output_size);
     REALM_ASSERT(output_size == 32);
+#elif REALM_HAVE_WOLFSSL
+    const EVP_MD* digest_type = EVP_sha256();
+    unsigned int output_size;
+// TODO message_digest(digest_type, in_buffer, in_buffer_size, out_buffer, &output_size);
+    REALM_ASSERT(output_size == 32);
 #else
     sha256_state s;
     sha_init(s);
@@ -244,8 +266,14 @@ void hmac_sha224(Span<const uint8_t> in_buffer, Span<uint8_t, 28> out_buffer, Sp
     HMAC(EVP_sha224(), key.data(), static_cast<int>(key.size()), in_buffer.data(), in_buffer.size(),
          out_buffer.data(), &hashLen);
     REALM_ASSERT_DEBUG(hashLen == out_buffer.size());
+#elif REALM_HAVE_WOLFSSL
+    static_assert(SHA224_DIGEST_LENGTH == out_buffer.size());
+    unsigned int hashLen;
+    HMAC(EVP_sha224(), key.data(), static_cast<int>(key.size()), in_buffer.data(), in_buffer.size(),
+         out_buffer.data(), &hashLen);
+    REALM_ASSERT_DEBUG(hashLen == out_buffer.size());
 #else
-#error "No SHA224 digest implementation on this platform."
+    #error "No SHA224 digest implementation on this platform."
 #endif
 }
 
@@ -263,8 +291,14 @@ void hmac_sha256(Span<const uint8_t> in_buffer, Span<uint8_t, 32> out_buffer, Sp
     HMAC(EVP_sha256(), key.data(), static_cast<int>(key.size()), in_buffer.data(), in_buffer.size(),
          out_buffer.data(), &hashLen);
     REALM_ASSERT_DEBUG(hashLen == out_buffer.size());
+#elif REALM_HAVE_WOLFSSL
+    static_assert(SHA256_DIGEST_LENGTH == out_buffer.size());
+    unsigned int hashLen;
+    HMAC(EVP_sha256(), key.data(), static_cast<int>(key.size()), in_buffer.data(), in_buffer.size(),
+         out_buffer.data(), &hashLen);
+    REALM_ASSERT_DEBUG(hashLen == out_buffer.size());
 #else
-#error "No SHA56 digest implementation on this platform."
+    #error "No SHA56 digest implementation on this platform."
 #endif
 }
 

From d02f2cb5f9ba79f9e7f01dbdb399debb9641f8b5 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 12:28:29 -0800
Subject: [PATCH 12/29] WIP message_digest for REALM_HAVE_WOLFSSL

---
 src/realm/util/sha_crypto.cpp | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/src/realm/util/sha_crypto.cpp b/src/realm/util/sha_crypto.cpp
index d9df87d4e08..bce7db7b08b 100644
--- a/src/realm/util/sha_crypto.cpp
+++ b/src/realm/util/sha_crypto.cpp
@@ -41,7 +41,6 @@
     #else
         #include <wolfssl/wolfcrypt/settings.h>
     #endif
-
     #include <wolfssl/openssl/sha.h>
     #include <wolfssl/openssl/evp.h>
     #include <wolfssl/openssl/hmac.h>
@@ -143,7 +142,7 @@ struct Hash {
     UCHAR hash_object_buffer[512];
     DWORD hash_size;
 };
-#elif REALM_HAVE_OPENSSL
+#elif REALM_HAVE_OPENSSL || REALM_HAVE_WOLFSSL
 void message_digest(const EVP_MD* digest_type, const char* in_buffer, size_t in_buffer_size,
                     unsigned char* out_buffer, unsigned int* output_size)
 {
@@ -219,7 +218,7 @@ void sha1(const char* in_buffer, size_t in_buffer_size, unsigned char* out_buffe
 #elif REALM_HAVE_WOLFSSL
     const EVP_MD* digest_type = EVP_sha1();
     unsigned int output_size;
- // TODO   message_digest(digest_type, in_buffer, in_buffer_size, out_buffer, &output_size);
+    message_digest(digest_type, in_buffer, in_buffer_size, out_buffer, &output_size);
     REALM_ASSERT(output_size == 20);
 #else
     SHA1(reinterpret_cast<char*>(out_buffer), in_buffer, in_buffer_size);
@@ -242,7 +241,7 @@ void sha256(const char* in_buffer, size_t in_buffer_size, unsigned char* out_buf
 #elif REALM_HAVE_WOLFSSL
     const EVP_MD* digest_type = EVP_sha256();
     unsigned int output_size;
-// TODO message_digest(digest_type, in_buffer, in_buffer_size, out_buffer, &output_size);
+    message_digest(digest_type, in_buffer, in_buffer_size, out_buffer, &output_size);
     REALM_ASSERT(output_size == 32);
 #else
     sha256_state s;

From 4250431562958f27c0d4c4c29fdb805df42632e0 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 15:45:55 -0800
Subject: [PATCH 13/29] WIP hard coded wolfssl binary paths (nearly fully
 compiling)

---
 CMakeLists.txt                                |  2 +-
 src/realm/CMakeLists.txt                      |  4 +--
 src/realm/exec/CMakeLists.txt                 | 16 ++++++------
 src/realm/sync/CMakeLists.txt                 |  4 +--
 .../noinst/server/crypto_server_openssl.cpp   |  3 +++
 src/realm/sync/tools/CMakeLists.txt           | 22 +++++++++++++---
 src/realm/util/sha_crypto.cpp                 | 25 +++++--------------
 test/CMakeLists.txt                           | 20 ++++++++-------
 8 files changed, 51 insertions(+), 45 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index d205533b932..ed5d77e863e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -319,7 +319,6 @@ if(REALM_NEEDS_OPENSSL OR REALM_FORCE_OPENSSL)
     endif()
     find_package(OpenSSL REQUIRED)
     set(REALM_HAVE_OPENSSL ON)
-    message(STATUS "\nALERT: REALM_HAVE_OPENSSL set ON")
     string(REGEX MATCH "^([0-9]+)\\.([0-9]+)" OPENSSL_VERSION_MAJOR_MINOR "${OPENSSL_VERSION}")
 elseif(APPLE)
     set(REALM_HAVE_SECURE_TRANSPORT "1")
@@ -369,6 +368,7 @@ include_directories(${CMAKE_CURRENT_BINARY_DIR}/src) # For generated files (like
 if (REALM_HAVE_WOLFSSL)
     message(STATUS "Found REALM_HAVE_WOLFSSL")
     include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr")
+    include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr/wolfcrypt")
 endif()
 
 # TODO fix hard coded paths
diff --git a/src/realm/CMakeLists.txt b/src/realm/CMakeLists.txt
index 12c981ab739..6c45639db02 100644
--- a/src/realm/CMakeLists.txt
+++ b/src/realm/CMakeLists.txt
@@ -346,7 +346,7 @@ endif()
 # On systems without a built-in SHA-2 implementation (or one provided by a dependency)
 # we need to bundle the public domain implementation.
 # Note: This is also used on Windows because Windows lacks a native SHA224 hash needed for realm encryption
-if(NOT APPLE AND NOT REALM_HAVE_OPENSSL AND NOT REALM_HAVE_WOLFSSL OR WIN32)
+if((NOT APPLE AND NOT REALM_HAVE_OPENSSL AND NOT REALM_HAVE_WOLFSSL) OR WIN32)
     add_library(sha2 OBJECT ../external/sha-2/sha224.cpp ../external/sha-2/sha256.cpp)
     target_include_directories(Storage PRIVATE ../external/sha-2)
     target_sources(Storage PRIVATE $<TARGET_OBJECTS:sha2>)
@@ -377,7 +377,7 @@ endif()
 
 if(REALM_ENABLE_ENCRYPTION AND UNIX AND NOT APPLE AND REALM_HAVE_OPENSSL)
     if (REALM_HAVE_WOLFSSL)
-        target_link_libraries(Storage PUBLIC WolfSSL)
+        target_link_libraries(Storage PUBLIC "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
     elseif (REALM_HAVE_OPENSSL)
         target_link_libraries(Storage PUBLIC OpenSSL::Crypto)
     endif()
diff --git a/src/realm/exec/CMakeLists.txt b/src/realm/exec/CMakeLists.txt
index 16bb966d868..26d92db5edb 100644
--- a/src/realm/exec/CMakeLists.txt
+++ b/src/realm/exec/CMakeLists.txt
@@ -3,14 +3,14 @@ set_target_properties(RealmImporter PROPERTIES
     OUTPUT_NAME "realm-importer"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmImporter Storage)
+target_link_libraries(RealmImporter Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 
 if(NOT APPLE AND NOT ANDROID AND NOT CMAKE_SYSTEM_NAME MATCHES "^Windows")
     add_executable(RealmDaemon realmd.cpp)
     set_target_properties(RealmDaemon PROPERTIES
         OUTPUT_NAME "realmd"
         DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
-    target_link_libraries(RealmDaemon Storage)
+    target_link_libraries(RealmDaemon Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
     list(APPEND ExecTargetsToInstall RealmDaemon)
 endif()
 
@@ -19,7 +19,7 @@ set_target_properties(RealmTrawler PROPERTIES
     OUTPUT_NAME "realm-trawler"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmTrawler Storage)
+target_link_libraries(RealmTrawler Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 if (EMSCRIPTEN)
     set_target_properties(RealmTrawler PROPERTIES EXCLUDE_FROM_ALL TRUE)
 endif()
@@ -29,7 +29,7 @@ set_target_properties(RealmEnumerate PROPERTIES
     OUTPUT_NAME "realm-enumerate"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmEnumerate ObjectStore)
+target_link_libraries(RealmEnumerate ObjectStore )
 # FIXME can be fixed for others, but requires link and install fixes for libuv target
 if (NOT APPLE)
     set_target_properties(RealmEnumerate PROPERTIES EXCLUDE_FROM_ALL TRUE)
@@ -40,7 +40,7 @@ set_target_properties(RealmDecrypt PROPERTIES
     OUTPUT_NAME "realm-decrypt"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmDecrypt Storage)
+target_link_libraries(RealmDecrypt Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 if (NOT REALM_ENABLE_ENCRYPTION)
     set_target_properties(RealmDecrypt PROPERTIES EXCLUDE_FROM_ALL TRUE)
 endif()
@@ -50,14 +50,14 @@ set_target_properties(RealmEncrypt PROPERTIES
     OUTPUT_NAME "realm-encrypt"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmEncrypt Storage)
+target_link_libraries(RealmEncrypt Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 
 add_executable(RealmBrowser realm_browser.cpp)
 set_target_properties(RealmBrowser PROPERTIES
     OUTPUT_NAME "realm-browser-10"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmBrowser Storage)
+target_link_libraries(RealmBrowser Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 
 if(REALM_ENABLE_SYNC)
 add_executable(Realm2JSON realm2json.cpp )
@@ -65,7 +65,7 @@ set_target_properties(Realm2JSON PROPERTIES
     OUTPUT_NAME "realm2json"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(Realm2JSON Storage QueryParser Sync)
+target_link_libraries(Realm2JSON Storage QueryParser Sync "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 list(APPEND ExecTargetsToInstall Realm2JSON)
 endif()
 
diff --git a/src/realm/sync/CMakeLists.txt b/src/realm/sync/CMakeLists.txt
index 4c103d4fe8f..58787a4c9c1 100644
--- a/src/realm/sync/CMakeLists.txt
+++ b/src/realm/sync/CMakeLists.txt
@@ -105,9 +105,9 @@ if(APPLE AND NOT REALM_FORCE_OPENSSL)
     target_link_options(Sync INTERFACE "SHELL:-framework Security")
 elseif(REALM_HAVE_WOLFSSL)
     message(STATUS "REALM_HAVE_WOLFSSL")
-    target_link_libraries(Sync PUBLIC WolfSSL)
+    target_link_libraries(Sync PUBLIC "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 elseif(REALM_HAVE_OPENSSL)
-    message(STATUS "REALM_HAVE_OPENSSL")
+    message(STATUS "Sync found REALM_HAVE_OPENSSL")
     target_link_libraries(Sync PUBLIC OpenSSL::SSL)
 endif()
 
diff --git a/src/realm/sync/noinst/server/crypto_server_openssl.cpp b/src/realm/sync/noinst/server/crypto_server_openssl.cpp
index ac5ba4445a5..4b0c76f9c1a 100644
--- a/src/realm/sync/noinst/server/crypto_server_openssl.cpp
+++ b/src/realm/sync/noinst/server/crypto_server_openssl.cpp
@@ -24,6 +24,9 @@
     #else
         #include <wolfssl/wolfcrypt/settings.h>
     #endif
+    #include <wolfssl/openssl/bio.h>
+    #include <wolfssl/openssl/pem.h>
+    #include <wolfssl/openssl/evp.h>
 #else
     #error "Neiher REALM_HAVE_WOLFSSL nor REALM_HAVE_OPENSSL defined. Pick one."
 
diff --git a/src/realm/sync/tools/CMakeLists.txt b/src/realm/sync/tools/CMakeLists.txt
index 2740c288559..4e1bb1f96c5 100644
--- a/src/realm/sync/tools/CMakeLists.txt
+++ b/src/realm/sync/tools/CMakeLists.txt
@@ -1,27 +1,41 @@
+if (REALM_HAVE_WOLFSSL)
+    message(STATUS "Found REALM_HAVE_WOLFSSL")
+    include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr")
+    include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr/wolfcrypt")
+endif()
+
+# TODO fix hard coded paths
+include_directories("/mnt/c/workspace/osp-gojimmypi/realm/realm-core-gojimmypi/src")
+include_directories("/mnt/c/workspace/osp-gojimmypi/realm/realm-core-gojimmypi/src/realm/object-store/c_api")
+
+link_directories("/home/gojimmypi/wolfssl-install-dir") # Adjust as needed for the exact path to the compiled libwolfssl.a or libwolfssl.so
+
+include_directories("/home/gojimmypi/wolfssl-install-dir/include")  # Adjust if needed
+link_directories("/home/gojimmypi/wolfssl-install-dir/lib")
 
 add_executable(InspectorInspectClientRealm "inspect_client_realm.cpp")
 set_target_properties(InspectorInspectClientRealm PROPERTIES
                       OUTPUT_NAME "realm-inspect-client-realm"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(InspectorInspectClientRealm Sync Storage)
+target_link_libraries(InspectorInspectClientRealm Sync Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 
 add_executable(InspectorPrintChangeset "print_changeset.cpp")
 set_target_properties(InspectorPrintChangeset PROPERTIES
                       OUTPUT_NAME "realm-print-changeset"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(InspectorPrintChangeset Sync Storage)
+target_link_libraries(InspectorPrintChangeset Sync Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 
 add_executable(ApplyToStateCommand apply_to_state_command.cpp)
 set_target_properties(ApplyToStateCommand PROPERTIES
                       OUTPUT_NAME "realm-apply-to-state"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(ApplyToStateCommand Sync Storage)
+target_link_libraries(ApplyToStateCommand Sync Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 
 add_executable(HistCommand hist_command.cpp)
 set_target_properties(HistCommand PROPERTIES
                       OUTPUT_NAME "realm-hist"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(HistCommand Sync Storage)
+target_link_libraries(HistCommand Sync Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 
 install(TARGETS
     HistCommand
diff --git a/src/realm/util/sha_crypto.cpp b/src/realm/util/sha_crypto.cpp
index bce7db7b08b..962ccb9352e 100644
--- a/src/realm/util/sha_crypto.cpp
+++ b/src/realm/util/sha_crypto.cpp
@@ -33,6 +33,7 @@
     #include <openssl/evp.h>
     #include <openssl/hmac.h>
 #elif REALM_HAVE_WOLFSSL
+    #pragma message "REALM_HAVE_WOLFSSL in sha_crypto"
     #ifdef HAVE_CONFIG_H
         #include <config.h>
     #endif
@@ -41,6 +42,11 @@
     #else
         #include <wolfssl/wolfcrypt/settings.h>
     #endif
+    #ifndef WOLFSSL_EVP_INCLUDED
+        #error "WOLFSSL_EVP_INCLUDED needed"
+    #else
+        #pragma message "sha_crypto WOLFSSL_EVP_INCLUDED"
+    #endif
     #include <wolfssl/openssl/sha.h>
     #include <wolfssl/openssl/evp.h>
     #include <wolfssl/openssl/hmac.h>
@@ -49,25 +55,6 @@
     #define REALM_USE_BUNDLED_SHA2 1
 #endif
 
-#if REALM_HAVE_WOLFSSL
-    #ifdef HAVE_CONFIG_H
-        #include <config.h>
-    #endif
-    #ifndef WOLFSSL_USER_SETTINGS
-        #include <wolfssl/options.h>
-    #else
-        #include <wolfssl/wolfcrypt/settings.h>
-    #endif
-    #include <wolfssl/openssl/sha.h>
-    #ifndef WOLFSSL_EVP_INCLUDED
-        #error "WOLFSSL_EVP_INCLUDED needed"
-    #endif
-    #include <wolfssl/openssl/evp.h>
-    #include <wolfssl/openssl/hmac.h>
-    #include <wolfssl/openssl/sha.h>
-    #include <wolfssl/openssl/hmac.h>
-#endif /* REALM_HAVE_WOLFSSL */
-
 #ifdef REALM_USE_BUNDLED_SHA2
 #include <sha224.hpp>
 #include <sha256.hpp>
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 97df6f482f9..e8f6bf1b170 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -1,6 +1,8 @@
 add_subdirectory(util)
 add_custom_target(benchmarks)
 add_subdirectory(object-store)
+include_directories("/home/gojimmypi/wolfssl-install-dir/include")  # Adjust if needed
+link_directories("/home/gojimmypi/wolfssl-install-dir/lib")
 
 # AFL and LIBFUZZER not yet supported by Windows
 if(NOT CMAKE_SYSTEM_NAME MATCHES "^Windows" AND NOT EMSCRIPTEN AND NOT ANDROID)
@@ -140,10 +142,10 @@ file(GLOB REQUIRED_TEST_FILES
 
 add_library(CoreTestLib OBJECT ${CORE_TESTS} ${REQUIRED_TEST_FILES} ${REALM_TEST_HEADERS})
 enable_stdfilesystem(CoreTestLib)
-target_link_libraries(CoreTestLib QueryParser)
+target_link_libraries(CoreTestLib QueryParser "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 
 add_executable(CoreTests main.cpp test_all.cpp ${REQUIRED_TEST_FILES})
-target_link_libraries(CoreTests CoreTestLib TestUtil)
+target_link_libraries(CoreTests CoreTestLib TestUtil "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 set_target_resources(CoreTests "${REQUIRED_TEST_FILES}")
 set_target_properties(CoreTests PROPERTIES
     OUTPUT_NAME "realm-tests"
@@ -173,7 +175,7 @@ enable_stdfilesystem(CoreTests)
 
 if(UNIX AND NOT APPLE)
     # This enables symbols in backtraces
-    target_link_libraries(CoreTests "-rdynamic")
+    target_link_libraries(CoreTests "-rdynamic" "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 endif()
 
 target_include_directories(CoreTests PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}")
@@ -234,18 +236,18 @@ if(REALM_ENABLE_SYNC)
 
     add_library(SyncTestLib OBJECT ${SYNC_TESTS} ${SYNC_TEST_HEADERS} ${SYNC_TEST_RESOURCES})
     enable_stdfilesystem(SyncTestLib)
-    target_link_libraries(SyncTestLib Sync SyncServer Storage)
+    target_link_libraries(SyncTestLib Sync SyncServer Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 
     add_executable(SyncTests main.cpp test_all.cpp ${SYNC_TEST_RESOURCES})
     set_target_properties(SyncTests PROPERTIES OUTPUT_NAME "realm-sync-tests")
     set_target_resources(SyncTests "${SYNC_TEST_RESOURCES}")
     enable_stdfilesystem(SyncTests)
-    target_link_libraries(SyncTests SyncTestLib TestUtil)
+    target_link_libraries(SyncTests SyncTestLib TestUtil "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
     add_bundled_test(SyncTests)
 
     if(UNIX AND NOT APPLE)
         # This enables symbols in backtraces
-        target_link_libraries(SyncTests "-rdynamic")
+        target_link_libraries(SyncTests "-rdynamic" "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
     endif()
 endif()
 
@@ -266,15 +268,15 @@ if(WINDOWS_STORE)
 endif()
 
 if(REALM_ENABLE_SYNC)
-    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib SyncTestLib TestUtil)
+    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib SyncTestLib TestUtil "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 else()
-    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib TestUtil)
+    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib TestUtil "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 endif()
 
 enable_stdfilesystem(CombinedTests)
 
 if(UNIX AND NOT APPLE)
     # This enables symbols in backtraces
-    target_link_libraries(CombinedTests "-rdynamic")
+    target_link_libraries(CombinedTests "-rdynamic" "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 endif()
 

From 803663cd51d485a5e6eaa75efd63f07ee8343287 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Thu, 7 Nov 2024 16:12:13 -0800
Subject: [PATCH 14/29] WIP hard coded wolfssl lib dir (fail on
 realm-benchmark-common-tasks)

---
 src/realm/sync/tools/CMakeLists.txt | 2 +-
 test/CMakeLists.txt                 | 2 +-
 test/util/CMakeLists.txt            | 6 +++---
 3 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/realm/sync/tools/CMakeLists.txt b/src/realm/sync/tools/CMakeLists.txt
index 4e1bb1f96c5..4e580c1f1e4 100644
--- a/src/realm/sync/tools/CMakeLists.txt
+++ b/src/realm/sync/tools/CMakeLists.txt
@@ -10,7 +10,7 @@ include_directories("/mnt/c/workspace/osp-gojimmypi/realm/realm-core-gojimmypi/s
 
 link_directories("/home/gojimmypi/wolfssl-install-dir") # Adjust as needed for the exact path to the compiled libwolfssl.a or libwolfssl.so
 
-include_directories("/home/gojimmypi/wolfssl-install-dir/include")  # Adjust if needed
+include_directories("/home/gojimmypi/wolfssl-install-dir/include")
 link_directories("/home/gojimmypi/wolfssl-install-dir/lib")
 
 add_executable(InspectorInspectClientRealm "inspect_client_realm.cpp")
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index e8f6bf1b170..e25838e328e 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -1,7 +1,7 @@
 add_subdirectory(util)
 add_custom_target(benchmarks)
 add_subdirectory(object-store)
-include_directories("/home/gojimmypi/wolfssl-install-dir/include")  # Adjust if needed
+include_directories("/home/gojimmypi/wolfssl-install-dir/include")
 link_directories("/home/gojimmypi/wolfssl-install-dir/lib")
 
 # AFL and LIBFUZZER not yet supported by Windows
diff --git a/test/util/CMakeLists.txt b/test/util/CMakeLists.txt
index 4f652f1d6a8..ad572bef035 100644
--- a/test/util/CMakeLists.txt
+++ b/test/util/CMakeLists.txt
@@ -50,14 +50,14 @@ if(REALM_ENABLE_SYNC)
     )
 endif()
 
-add_library(TestUtil STATIC ${TEST_UTIL_SOURCES} ${TEST_UTIL_HEADERS})
+add_library(TestUtil STATIC ${TEST_UTIL_SOURCES} ${TEST_UTIL_HEADERS} "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 
-target_link_libraries(TestUtil Storage)
+target_link_libraries(TestUtil Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
 
 if(UNIX AND NOT APPLE)
     find_library(LIBRT rt)
     if(LIBRT)
-        target_link_libraries(TestUtil ${LIBRT})
+        target_link_libraries(TestUtil ${LIBRT} "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
     # Android has librt included in libc
     elseif(NOT ANDROID)
         message(WARNING "librt was not found. This means that the benchmarks will not be able to link properly.")

From e879cadad7a3319836e4ac8b514bea0793a6488f Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Fri, 8 Nov 2024 10:28:46 -0800
Subject: [PATCH 15/29] Successful full build, using hard-coded wolfSSL paths
 only

---
 test/benchmark-common-tasks/CMakeLists.txt | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/test/benchmark-common-tasks/CMakeLists.txt b/test/benchmark-common-tasks/CMakeLists.txt
index 9d7d9fa7c9c..97321eeeadd 100644
--- a/test/benchmark-common-tasks/CMakeLists.txt
+++ b/test/benchmark-common-tasks/CMakeLists.txt
@@ -1,4 +1,7 @@
 add_executable(realm-benchmark-common-tasks main.cpp)
-target_link_libraries(realm-benchmark-common-tasks TestUtil QueryParser)
-add_dependencies(benchmarks realm-benchmark-common-tasks)
+include_directories("/home/gojimmypi/wolfssl-install-dir/include")
+link_directories("/home/gojimmypi/wolfssl-install-dir/lib")
+find_library(WOLFSSL_LIB NAMES wolfssl PATHS "/home/gojimmypi/wolfssl-install-dir/lib")
+target_link_libraries(realm-benchmark-common-tasks TestUtil QueryParser  ${WOLFSSL_LIB})
 
+add_dependencies(benchmarks realm-benchmark-common-tasks)

From 2db110885915c76a8d7f2be1ae1bb57f3dfad315 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Fri, 8 Nov 2024 13:48:04 -0800
Subject: [PATCH 16/29] Initial confirmation of REALM_WOLFSSL_ROOT_DIR

---
 CMakeLists.txt                             | 33 ++++++++++++----------
 src/realm/CMakeLists.txt                   |  3 ++
 src/realm/exec/CMakeLists.txt              |  5 ++++
 src/realm/sync/CMakeLists.txt              |  6 ++++
 src/realm/sync/network/network_ssl.hpp     |  3 +-
 src/realm/sync/tools/CMakeLists.txt        |  6 +++-
 test/CMakeLists.txt                        |  7 +++++
 test/benchmark-common-tasks/CMakeLists.txt |  6 ++++
 test/util/CMakeLists.txt                   |  6 ++++
 9 files changed, 58 insertions(+), 17 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ed5d77e863e..9b01f176f9f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -305,24 +305,27 @@ elseif(REALM_ENABLE_ENCRYPTION AND CMAKE_SYSTEM_NAME MATCHES "Linux|Android")
     set(REALM_NEEDS_OPENSSL TRUE)
 endif()
 
-if(NOT REALM_HAVE_WOLFSSL)
-if(REALM_NEEDS_OPENSSL OR REALM_FORCE_OPENSSL)
-    if(NOT REALM_USE_SYSTEM_OPENSSL AND (ANDROID OR WIN32 OR CMAKE_SYSTEM_NAME STREQUAL "Linux"))
-        # Use our own prebuilt OpenSSL
-        realm_acquire_dependency(openssl ${DEP_OPENSSL_VERSION} OPENSSL_CMAKE_INCLUDE_FILE)
+if(REALM_HAVE_WOLFSSL)
+    # Allow users to specify their wolfSSL installation directory
+    message(STATUS "Main cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+else()
+    if(REALM_NEEDS_OPENSSL OR REALM_FORCE_OPENSSL)
+        if(NOT REALM_USE_SYSTEM_OPENSSL AND (ANDROID OR WIN32 OR CMAKE_SYSTEM_NAME STREQUAL "Linux"))
+            # Use our own prebuilt OpenSSL
+            realm_acquire_dependency(openssl ${DEP_OPENSSL_VERSION} OPENSSL_CMAKE_INCLUDE_FILE)
 
-        include(${OPENSSL_CMAKE_INCLUDE_FILE})
-    endif()
+            include(${OPENSSL_CMAKE_INCLUDE_FILE})
+        endif()
 
-    if(NOT DEFINED OPENSSL_USE_STATIC_LIBS)
-        set(OPENSSL_USE_STATIC_LIBS ON)
+        if(NOT DEFINED OPENSSL_USE_STATIC_LIBS)
+            set(OPENSSL_USE_STATIC_LIBS ON)
+        endif()
+        find_package(OpenSSL REQUIRED)
+        set(REALM_HAVE_OPENSSL ON)
+        string(REGEX MATCH "^([0-9]+)\\.([0-9]+)" OPENSSL_VERSION_MAJOR_MINOR "${OPENSSL_VERSION}")
+    elseif(APPLE)
+        set(REALM_HAVE_SECURE_TRANSPORT "1")
     endif()
-    find_package(OpenSSL REQUIRED)
-    set(REALM_HAVE_OPENSSL ON)
-    string(REGEX MATCH "^([0-9]+)\\.([0-9]+)" OPENSSL_VERSION_MAJOR_MINOR "${OPENSSL_VERSION}")
-elseif(APPLE)
-    set(REALM_HAVE_SECURE_TRANSPORT "1")
-endif()
 endif()
 
 # Use Zlib for Sync, but allow integrators to override it
diff --git a/src/realm/CMakeLists.txt b/src/realm/CMakeLists.txt
index 6c45639db02..09e5cd7b528 100644
--- a/src/realm/CMakeLists.txt
+++ b/src/realm/CMakeLists.txt
@@ -1,3 +1,6 @@
+if(REALM_HAVE_WOLFSSL)
+    message(STATUS "realm cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+endif()
 set(REALM_SOURCES
     # slowest to compile first
     query.cpp
diff --git a/src/realm/exec/CMakeLists.txt b/src/realm/exec/CMakeLists.txt
index 26d92db5edb..46c3136e486 100644
--- a/src/realm/exec/CMakeLists.txt
+++ b/src/realm/exec/CMakeLists.txt
@@ -1,3 +1,8 @@
+if(REALM_HAVE_WOLFSSL)
+    message(STATUS "exec cmake: c=${REALM_WOLFSSL_ROOT_DIR}")
+else()
+    message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
+endif()
 add_executable(RealmImporter importer_tool.cpp importer.cpp importer.hpp)
 set_target_properties(RealmImporter PROPERTIES
     OUTPUT_NAME "realm-importer"
diff --git a/src/realm/sync/CMakeLists.txt b/src/realm/sync/CMakeLists.txt
index 58787a4c9c1..86b1a618b29 100644
--- a/src/realm/sync/CMakeLists.txt
+++ b/src/realm/sync/CMakeLists.txt
@@ -1,3 +1,9 @@
+if(REALM_HAVE_WOLFSSL)
+    message(STATUS "sync cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+else()
+    message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
+endif()
+
 set(SYNC_SOURCES
     config.cpp
     noinst/changeset_index.cpp
diff --git a/src/realm/sync/network/network_ssl.hpp b/src/realm/sync/network/network_ssl.hpp
index 87a2d309c9d..39fca41173a 100644
--- a/src/realm/sync/network/network_ssl.hpp
+++ b/src/realm/sync/network/network_ssl.hpp
@@ -617,7 +617,8 @@ inline void Context::use_verify_file(const std::string& path)
 inline void Context::use_included_certificate_roots()
 {
     std::error_code ec;
-    ssl_use_included_certificate_roots(ec);
+// TODO not disabled
+    // ssl_use_included_certificate_roots(ec);
     if (ec) {
         throw std::system_error(ec);
     }
diff --git a/src/realm/sync/tools/CMakeLists.txt b/src/realm/sync/tools/CMakeLists.txt
index 4e580c1f1e4..e920822474a 100644
--- a/src/realm/sync/tools/CMakeLists.txt
+++ b/src/realm/sync/tools/CMakeLists.txt
@@ -1,7 +1,11 @@
-if (REALM_HAVE_WOLFSSL)
+if(REALM_HAVE_WOLFSSL)
+    message(STATUS "tools cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
     message(STATUS "Found REALM_HAVE_WOLFSSL")
+
     include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr")
     include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr/wolfcrypt")
+else()
+    message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
 endif()
 
 # TODO fix hard coded paths
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index e25838e328e..c65b580b3d0 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -1,3 +1,10 @@
+
+if(REALM_HAVE_WOLFSSL)
+    message(STATUS "test cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+else()
+    message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
+endif()
+
 add_subdirectory(util)
 add_custom_target(benchmarks)
 add_subdirectory(object-store)
diff --git a/test/benchmark-common-tasks/CMakeLists.txt b/test/benchmark-common-tasks/CMakeLists.txt
index 97321eeeadd..1ace3cb5cbd 100644
--- a/test/benchmark-common-tasks/CMakeLists.txt
+++ b/test/benchmark-common-tasks/CMakeLists.txt
@@ -1,3 +1,9 @@
+if(REALM_HAVE_WOLFSSL)
+	message(STATUS "benchmark common tasks cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+else()
+    message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
+endif()
+
 add_executable(realm-benchmark-common-tasks main.cpp)
 include_directories("/home/gojimmypi/wolfssl-install-dir/include")
 link_directories("/home/gojimmypi/wolfssl-install-dir/lib")
diff --git a/test/util/CMakeLists.txt b/test/util/CMakeLists.txt
index ad572bef035..56d54f7d8b6 100644
--- a/test/util/CMakeLists.txt
+++ b/test/util/CMakeLists.txt
@@ -1,3 +1,9 @@
+if(REALM_HAVE_WOLFSSL)
+    message(STATUS "util cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+else()
+    message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
+endif()
+
 set(TEST_UTIL_SOURCES
     benchmark_results.cpp
     crypt_key.cpp

From 32401d28f6fc9a74a1c4947f01d80f320ead65ac Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Fri, 8 Nov 2024 13:48:52 -0800
Subject: [PATCH 17/29] cmake uses REALM_WOLFSSL_ROOT_DIR rather than hard
 coded path (working!)

---
 src/realm/CMakeLists.txt                   |  2 +-
 src/realm/exec/CMakeLists.txt              | 14 +++++++-------
 src/realm/sync/CMakeLists.txt              |  2 +-
 src/realm/sync/tools/CMakeLists.txt        | 14 +++++++-------
 test/CMakeLists.txt                        | 22 +++++++++++-----------
 test/benchmark-common-tasks/CMakeLists.txt |  6 +++---
 test/util/CMakeLists.txt                   |  6 +++---
 7 files changed, 33 insertions(+), 33 deletions(-)

diff --git a/src/realm/CMakeLists.txt b/src/realm/CMakeLists.txt
index 09e5cd7b528..2397c2e7636 100644
--- a/src/realm/CMakeLists.txt
+++ b/src/realm/CMakeLists.txt
@@ -380,7 +380,7 @@ endif()
 
 if(REALM_ENABLE_ENCRYPTION AND UNIX AND NOT APPLE AND REALM_HAVE_OPENSSL)
     if (REALM_HAVE_WOLFSSL)
-        target_link_libraries(Storage PUBLIC "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+        target_link_libraries(Storage PUBLIC "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
     elseif (REALM_HAVE_OPENSSL)
         target_link_libraries(Storage PUBLIC OpenSSL::Crypto)
     endif()
diff --git a/src/realm/exec/CMakeLists.txt b/src/realm/exec/CMakeLists.txt
index 46c3136e486..ec59bc9a8ac 100644
--- a/src/realm/exec/CMakeLists.txt
+++ b/src/realm/exec/CMakeLists.txt
@@ -8,14 +8,14 @@ set_target_properties(RealmImporter PROPERTIES
     OUTPUT_NAME "realm-importer"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmImporter Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(RealmImporter Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 
 if(NOT APPLE AND NOT ANDROID AND NOT CMAKE_SYSTEM_NAME MATCHES "^Windows")
     add_executable(RealmDaemon realmd.cpp)
     set_target_properties(RealmDaemon PROPERTIES
         OUTPUT_NAME "realmd"
         DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
-    target_link_libraries(RealmDaemon Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+    target_link_libraries(RealmDaemon Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
     list(APPEND ExecTargetsToInstall RealmDaemon)
 endif()
 
@@ -24,7 +24,7 @@ set_target_properties(RealmTrawler PROPERTIES
     OUTPUT_NAME "realm-trawler"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmTrawler Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(RealmTrawler Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 if (EMSCRIPTEN)
     set_target_properties(RealmTrawler PROPERTIES EXCLUDE_FROM_ALL TRUE)
 endif()
@@ -45,7 +45,7 @@ set_target_properties(RealmDecrypt PROPERTIES
     OUTPUT_NAME "realm-decrypt"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmDecrypt Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(RealmDecrypt Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 if (NOT REALM_ENABLE_ENCRYPTION)
     set_target_properties(RealmDecrypt PROPERTIES EXCLUDE_FROM_ALL TRUE)
 endif()
@@ -55,14 +55,14 @@ set_target_properties(RealmEncrypt PROPERTIES
     OUTPUT_NAME "realm-encrypt"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmEncrypt Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(RealmEncrypt Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 
 add_executable(RealmBrowser realm_browser.cpp)
 set_target_properties(RealmBrowser PROPERTIES
     OUTPUT_NAME "realm-browser-10"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmBrowser Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(RealmBrowser Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 
 if(REALM_ENABLE_SYNC)
 add_executable(Realm2JSON realm2json.cpp )
@@ -70,7 +70,7 @@ set_target_properties(Realm2JSON PROPERTIES
     OUTPUT_NAME "realm2json"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(Realm2JSON Storage QueryParser Sync "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(Realm2JSON Storage QueryParser Sync "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 list(APPEND ExecTargetsToInstall Realm2JSON)
 endif()
 
diff --git a/src/realm/sync/CMakeLists.txt b/src/realm/sync/CMakeLists.txt
index 86b1a618b29..57cb6eabf1a 100644
--- a/src/realm/sync/CMakeLists.txt
+++ b/src/realm/sync/CMakeLists.txt
@@ -111,7 +111,7 @@ if(APPLE AND NOT REALM_FORCE_OPENSSL)
     target_link_options(Sync INTERFACE "SHELL:-framework Security")
 elseif(REALM_HAVE_WOLFSSL)
     message(STATUS "REALM_HAVE_WOLFSSL")
-    target_link_libraries(Sync PUBLIC "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+    target_link_libraries(Sync PUBLIC "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 elseif(REALM_HAVE_OPENSSL)
     message(STATUS "Sync found REALM_HAVE_OPENSSL")
     target_link_libraries(Sync PUBLIC OpenSSL::SSL)
diff --git a/src/realm/sync/tools/CMakeLists.txt b/src/realm/sync/tools/CMakeLists.txt
index e920822474a..8daed88fbac 100644
--- a/src/realm/sync/tools/CMakeLists.txt
+++ b/src/realm/sync/tools/CMakeLists.txt
@@ -12,34 +12,34 @@ endif()
 include_directories("/mnt/c/workspace/osp-gojimmypi/realm/realm-core-gojimmypi/src")
 include_directories("/mnt/c/workspace/osp-gojimmypi/realm/realm-core-gojimmypi/src/realm/object-store/c_api")
 
-link_directories("/home/gojimmypi/wolfssl-install-dir") # Adjust as needed for the exact path to the compiled libwolfssl.a or libwolfssl.so
+link_directories("${REALM_WOLFSSL_ROOT_DIR}/") # Adjust as needed for the exact path to the compiled libwolfssl.a or libwolfssl.so
 
-include_directories("/home/gojimmypi/wolfssl-install-dir/include")
-link_directories("/home/gojimmypi/wolfssl-install-dir/lib")
+include_directories("${REALM_WOLFSSL_ROOT_DIR}/include")
+link_directories("${REALM_WOLFSSL_ROOT_DIR}/lib")
 
 add_executable(InspectorInspectClientRealm "inspect_client_realm.cpp")
 set_target_properties(InspectorInspectClientRealm PROPERTIES
                       OUTPUT_NAME "realm-inspect-client-realm"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(InspectorInspectClientRealm Sync Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(InspectorInspectClientRealm Sync Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 
 add_executable(InspectorPrintChangeset "print_changeset.cpp")
 set_target_properties(InspectorPrintChangeset PROPERTIES
                       OUTPUT_NAME "realm-print-changeset"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(InspectorPrintChangeset Sync Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(InspectorPrintChangeset Sync Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 
 add_executable(ApplyToStateCommand apply_to_state_command.cpp)
 set_target_properties(ApplyToStateCommand PROPERTIES
                       OUTPUT_NAME "realm-apply-to-state"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(ApplyToStateCommand Sync Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(ApplyToStateCommand Sync Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 
 add_executable(HistCommand hist_command.cpp)
 set_target_properties(HistCommand PROPERTIES
                       OUTPUT_NAME "realm-hist"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(HistCommand Sync Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(HistCommand Sync Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 
 install(TARGETS
     HistCommand
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index c65b580b3d0..89db8c050f9 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -8,8 +8,8 @@ endif()
 add_subdirectory(util)
 add_custom_target(benchmarks)
 add_subdirectory(object-store)
-include_directories("/home/gojimmypi/wolfssl-install-dir/include")
-link_directories("/home/gojimmypi/wolfssl-install-dir/lib")
+include_directories("${REALM_WOLFSSL_ROOT_DIR}/include")
+link_directories("${REALM_WOLFSSL_ROOT_DIR}/lib")
 
 # AFL and LIBFUZZER not yet supported by Windows
 if(NOT CMAKE_SYSTEM_NAME MATCHES "^Windows" AND NOT EMSCRIPTEN AND NOT ANDROID)
@@ -149,10 +149,10 @@ file(GLOB REQUIRED_TEST_FILES
 
 add_library(CoreTestLib OBJECT ${CORE_TESTS} ${REQUIRED_TEST_FILES} ${REALM_TEST_HEADERS})
 enable_stdfilesystem(CoreTestLib)
-target_link_libraries(CoreTestLib QueryParser "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(CoreTestLib QueryParser "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 
 add_executable(CoreTests main.cpp test_all.cpp ${REQUIRED_TEST_FILES})
-target_link_libraries(CoreTests CoreTestLib TestUtil "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(CoreTests CoreTestLib TestUtil "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 set_target_resources(CoreTests "${REQUIRED_TEST_FILES}")
 set_target_properties(CoreTests PROPERTIES
     OUTPUT_NAME "realm-tests"
@@ -182,7 +182,7 @@ enable_stdfilesystem(CoreTests)
 
 if(UNIX AND NOT APPLE)
     # This enables symbols in backtraces
-    target_link_libraries(CoreTests "-rdynamic" "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+    target_link_libraries(CoreTests "-rdynamic" "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 endif()
 
 target_include_directories(CoreTests PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}")
@@ -243,18 +243,18 @@ if(REALM_ENABLE_SYNC)
 
     add_library(SyncTestLib OBJECT ${SYNC_TESTS} ${SYNC_TEST_HEADERS} ${SYNC_TEST_RESOURCES})
     enable_stdfilesystem(SyncTestLib)
-    target_link_libraries(SyncTestLib Sync SyncServer Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+    target_link_libraries(SyncTestLib Sync SyncServer Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 
     add_executable(SyncTests main.cpp test_all.cpp ${SYNC_TEST_RESOURCES})
     set_target_properties(SyncTests PROPERTIES OUTPUT_NAME "realm-sync-tests")
     set_target_resources(SyncTests "${SYNC_TEST_RESOURCES}")
     enable_stdfilesystem(SyncTests)
-    target_link_libraries(SyncTests SyncTestLib TestUtil "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+    target_link_libraries(SyncTests SyncTestLib TestUtil "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
     add_bundled_test(SyncTests)
 
     if(UNIX AND NOT APPLE)
         # This enables symbols in backtraces
-        target_link_libraries(SyncTests "-rdynamic" "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+        target_link_libraries(SyncTests "-rdynamic" "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
     endif()
 endif()
 
@@ -275,15 +275,15 @@ if(WINDOWS_STORE)
 endif()
 
 if(REALM_ENABLE_SYNC)
-    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib SyncTestLib TestUtil "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib SyncTestLib TestUtil "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 else()
-    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib TestUtil "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib TestUtil "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 endif()
 
 enable_stdfilesystem(CombinedTests)
 
 if(UNIX AND NOT APPLE)
     # This enables symbols in backtraces
-    target_link_libraries(CombinedTests "-rdynamic" "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+    target_link_libraries(CombinedTests "-rdynamic" "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 endif()
 
diff --git a/test/benchmark-common-tasks/CMakeLists.txt b/test/benchmark-common-tasks/CMakeLists.txt
index 1ace3cb5cbd..1985143a7c0 100644
--- a/test/benchmark-common-tasks/CMakeLists.txt
+++ b/test/benchmark-common-tasks/CMakeLists.txt
@@ -5,9 +5,9 @@ else()
 endif()
 
 add_executable(realm-benchmark-common-tasks main.cpp)
-include_directories("/home/gojimmypi/wolfssl-install-dir/include")
-link_directories("/home/gojimmypi/wolfssl-install-dir/lib")
-find_library(WOLFSSL_LIB NAMES wolfssl PATHS "/home/gojimmypi/wolfssl-install-dir/lib")
+include_directories("${REALM_WOLFSSL_ROOT_DIR}/include")
+link_directories("${REALM_WOLFSSL_ROOT_DIR}/lib")
+find_library(WOLFSSL_LIB NAMES wolfssl PATHS "${REALM_WOLFSSL_ROOT_DIR}/lib")
 target_link_libraries(realm-benchmark-common-tasks TestUtil QueryParser  ${WOLFSSL_LIB})
 
 add_dependencies(benchmarks realm-benchmark-common-tasks)
diff --git a/test/util/CMakeLists.txt b/test/util/CMakeLists.txt
index 56d54f7d8b6..9dc11aa39f4 100644
--- a/test/util/CMakeLists.txt
+++ b/test/util/CMakeLists.txt
@@ -56,14 +56,14 @@ if(REALM_ENABLE_SYNC)
     )
 endif()
 
-add_library(TestUtil STATIC ${TEST_UTIL_SOURCES} ${TEST_UTIL_HEADERS} "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+add_library(TestUtil STATIC ${TEST_UTIL_SOURCES} ${TEST_UTIL_HEADERS} "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 
-target_link_libraries(TestUtil Storage "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+target_link_libraries(TestUtil Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
 
 if(UNIX AND NOT APPLE)
     find_library(LIBRT rt)
     if(LIBRT)
-        target_link_libraries(TestUtil ${LIBRT} "/home/gojimmypi/wolfssl-install-dir/lib/libwolfssl.a")
+        target_link_libraries(TestUtil ${LIBRT} "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
     # Android has librt included in libc
     elseif(NOT ANDROID)
         message(WARNING "librt was not found. This means that the benchmarks will not be able to link properly.")

From ae2a4a56d739e23a67feb2de82ddf737944cac50 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Fri, 8 Nov 2024 13:52:33 -0800
Subject: [PATCH 18/29] REALM_ENABLE_ENCRYPTION (REALM_HAVE_OPENSSL OR
 REALM_HAVE_WOLFSSL)

---
 src/realm/CMakeLists.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/realm/CMakeLists.txt b/src/realm/CMakeLists.txt
index 2397c2e7636..0e6c7149b55 100644
--- a/src/realm/CMakeLists.txt
+++ b/src/realm/CMakeLists.txt
@@ -378,7 +378,7 @@ if(TARGET Backtrace::Backtrace)
     target_link_libraries(Storage PUBLIC Backtrace::Backtrace)
 endif()
 
-if(REALM_ENABLE_ENCRYPTION AND UNIX AND NOT APPLE AND REALM_HAVE_OPENSSL)
+if(REALM_ENABLE_ENCRYPTION AND UNIX AND NOT APPLE AND (REALM_HAVE_OPENSSL OR REALM_HAVE_WOLFSSL))
     if (REALM_HAVE_WOLFSSL)
         target_link_libraries(Storage PUBLIC "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
     elseif (REALM_HAVE_OPENSSL)

From b7ead091095d47569b317b1add6ad2e027b05c30 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Fri, 8 Nov 2024 14:38:40 -0800
Subject: [PATCH 19/29] Using global REALM_WOLFSSL_LIB (working!)

---
 CMakeLists.txt                      |  9 +++++++++
 src/realm/CMakeLists.txt            |  2 +-
 src/realm/exec/CMakeLists.txt       | 17 +++++++++--------
 src/realm/sync/CMakeLists.txt       |  2 +-
 src/realm/sync/tools/CMakeLists.txt |  8 ++++----
 test/CMakeLists.txt                 | 18 +++++++++---------
 test/util/CMakeLists.txt            |  6 +++---
 7 files changed, 36 insertions(+), 26 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9b01f176f9f..7f8a8e590af 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -308,7 +308,16 @@ endif()
 if(REALM_HAVE_WOLFSSL)
     # Allow users to specify their wolfSSL installation directory
     message(STATUS "Main cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+    set(REALM_WOLFSSL_LIB "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a" CACHE PATH "Path to the wolfSSL installation directory")
+    message(STATUS "REALM_WOLFSSL_LIB=${REALM_WOLFSSL_LIB}")
+    if(EXISTS "${REALM_WOLFSSL_LIB}")
+        message(STATUS "Found wolfssl lib file: ${REALM_WOLFSSL_LIB}")
+    else()
+        message(WARNING "File does not exist: ${REALM_WOLFSSL_LIB}")
+    endif()
 else()
+    set(REALM_WOLFSSL_LIB "" CACHE PATH "wolfSSL is not used when REALM_HAVE_WOLFSSL is not set.")
+    message(STATUS "Main cmake: Not using wolfSSL! (REALM_HAVE_WOLFSSL not enabled); REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
     if(REALM_NEEDS_OPENSSL OR REALM_FORCE_OPENSSL)
         if(NOT REALM_USE_SYSTEM_OPENSSL AND (ANDROID OR WIN32 OR CMAKE_SYSTEM_NAME STREQUAL "Linux"))
             # Use our own prebuilt OpenSSL
diff --git a/src/realm/CMakeLists.txt b/src/realm/CMakeLists.txt
index 0e6c7149b55..fa60fcd46d8 100644
--- a/src/realm/CMakeLists.txt
+++ b/src/realm/CMakeLists.txt
@@ -380,7 +380,7 @@ endif()
 
 if(REALM_ENABLE_ENCRYPTION AND UNIX AND NOT APPLE AND (REALM_HAVE_OPENSSL OR REALM_HAVE_WOLFSSL))
     if (REALM_HAVE_WOLFSSL)
-        target_link_libraries(Storage PUBLIC "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+        target_link_libraries(Storage PUBLIC "${REALM_WOLFSSL_LIB}")
     elseif (REALM_HAVE_OPENSSL)
         target_link_libraries(Storage PUBLIC OpenSSL::Crypto)
     endif()
diff --git a/src/realm/exec/CMakeLists.txt b/src/realm/exec/CMakeLists.txt
index ec59bc9a8ac..9291b99a6b9 100644
--- a/src/realm/exec/CMakeLists.txt
+++ b/src/realm/exec/CMakeLists.txt
@@ -1,5 +1,6 @@
 if(REALM_HAVE_WOLFSSL)
-    message(STATUS "exec cmake: c=${REALM_WOLFSSL_ROOT_DIR}")
+    message(STATUS "exec cmake: ${REALM_WOLFSSL_ROOT_DIR}")
+    message(STATUS "REALM_WOLFSSL_LIB=${REALM_WOLFSSL_LIB}")
 else()
     message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
 endif()
@@ -8,14 +9,14 @@ set_target_properties(RealmImporter PROPERTIES
     OUTPUT_NAME "realm-importer"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmImporter Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(RealmImporter Storage "${REALM_WOLFSSL_LIB}")
 
 if(NOT APPLE AND NOT ANDROID AND NOT CMAKE_SYSTEM_NAME MATCHES "^Windows")
     add_executable(RealmDaemon realmd.cpp)
     set_target_properties(RealmDaemon PROPERTIES
         OUTPUT_NAME "realmd"
         DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
-    target_link_libraries(RealmDaemon Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+    target_link_libraries(RealmDaemon Storage "${REALM_WOLFSSL_LIB}")
     list(APPEND ExecTargetsToInstall RealmDaemon)
 endif()
 
@@ -24,7 +25,7 @@ set_target_properties(RealmTrawler PROPERTIES
     OUTPUT_NAME "realm-trawler"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmTrawler Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(RealmTrawler Storage "${REALM_WOLFSSL_LIB}")
 if (EMSCRIPTEN)
     set_target_properties(RealmTrawler PROPERTIES EXCLUDE_FROM_ALL TRUE)
 endif()
@@ -45,7 +46,7 @@ set_target_properties(RealmDecrypt PROPERTIES
     OUTPUT_NAME "realm-decrypt"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmDecrypt Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(RealmDecrypt Storage "${REALM_WOLFSSL_LIB}")
 if (NOT REALM_ENABLE_ENCRYPTION)
     set_target_properties(RealmDecrypt PROPERTIES EXCLUDE_FROM_ALL TRUE)
 endif()
@@ -55,14 +56,14 @@ set_target_properties(RealmEncrypt PROPERTIES
     OUTPUT_NAME "realm-encrypt"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmEncrypt Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(RealmEncrypt Storage "${REALM_WOLFSSL_LIB}")
 
 add_executable(RealmBrowser realm_browser.cpp)
 set_target_properties(RealmBrowser PROPERTIES
     OUTPUT_NAME "realm-browser-10"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(RealmBrowser Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(RealmBrowser Storage "${REALM_WOLFSSL_LIB}")
 
 if(REALM_ENABLE_SYNC)
 add_executable(Realm2JSON realm2json.cpp )
@@ -70,7 +71,7 @@ set_target_properties(Realm2JSON PROPERTIES
     OUTPUT_NAME "realm2json"
     DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX}
 )
-target_link_libraries(Realm2JSON Storage QueryParser Sync "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(Realm2JSON Storage QueryParser Sync "${REALM_WOLFSSL_LIB}")
 list(APPEND ExecTargetsToInstall Realm2JSON)
 endif()
 
diff --git a/src/realm/sync/CMakeLists.txt b/src/realm/sync/CMakeLists.txt
index 57cb6eabf1a..9b5b4797f1a 100644
--- a/src/realm/sync/CMakeLists.txt
+++ b/src/realm/sync/CMakeLists.txt
@@ -111,7 +111,7 @@ if(APPLE AND NOT REALM_FORCE_OPENSSL)
     target_link_options(Sync INTERFACE "SHELL:-framework Security")
 elseif(REALM_HAVE_WOLFSSL)
     message(STATUS "REALM_HAVE_WOLFSSL")
-    target_link_libraries(Sync PUBLIC "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+    target_link_libraries(Sync PUBLIC "${REALM_WOLFSSL_LIB}")
 elseif(REALM_HAVE_OPENSSL)
     message(STATUS "Sync found REALM_HAVE_OPENSSL")
     target_link_libraries(Sync PUBLIC OpenSSL::SSL)
diff --git a/src/realm/sync/tools/CMakeLists.txt b/src/realm/sync/tools/CMakeLists.txt
index 8daed88fbac..053044326ae 100644
--- a/src/realm/sync/tools/CMakeLists.txt
+++ b/src/realm/sync/tools/CMakeLists.txt
@@ -21,25 +21,25 @@ add_executable(InspectorInspectClientRealm "inspect_client_realm.cpp")
 set_target_properties(InspectorInspectClientRealm PROPERTIES
                       OUTPUT_NAME "realm-inspect-client-realm"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(InspectorInspectClientRealm Sync Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(InspectorInspectClientRealm Sync Storage "${REALM_WOLFSSL_LIB}")
 
 add_executable(InspectorPrintChangeset "print_changeset.cpp")
 set_target_properties(InspectorPrintChangeset PROPERTIES
                       OUTPUT_NAME "realm-print-changeset"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(InspectorPrintChangeset Sync Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(InspectorPrintChangeset Sync Storage "${REALM_WOLFSSL_LIB}")
 
 add_executable(ApplyToStateCommand apply_to_state_command.cpp)
 set_target_properties(ApplyToStateCommand PROPERTIES
                       OUTPUT_NAME "realm-apply-to-state"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(ApplyToStateCommand Sync Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(ApplyToStateCommand Sync Storage "${REALM_WOLFSSL_LIB}")
 
 add_executable(HistCommand hist_command.cpp)
 set_target_properties(HistCommand PROPERTIES
                       OUTPUT_NAME "realm-hist"
                       DEBUG_POSTFIX "${CMAKE_DEBUG_POSTFIX}")
-target_link_libraries(HistCommand Sync Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(HistCommand Sync Storage "${REALM_WOLFSSL_LIB}")
 
 install(TARGETS
     HistCommand
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 89db8c050f9..3e0129cc866 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -149,10 +149,10 @@ file(GLOB REQUIRED_TEST_FILES
 
 add_library(CoreTestLib OBJECT ${CORE_TESTS} ${REQUIRED_TEST_FILES} ${REALM_TEST_HEADERS})
 enable_stdfilesystem(CoreTestLib)
-target_link_libraries(CoreTestLib QueryParser "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(CoreTestLib QueryParser "${REALM_WOLFSSL_LIB}")
 
 add_executable(CoreTests main.cpp test_all.cpp ${REQUIRED_TEST_FILES})
-target_link_libraries(CoreTests CoreTestLib TestUtil "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(CoreTests CoreTestLib TestUtil "${REALM_WOLFSSL_LIB}")
 set_target_resources(CoreTests "${REQUIRED_TEST_FILES}")
 set_target_properties(CoreTests PROPERTIES
     OUTPUT_NAME "realm-tests"
@@ -182,7 +182,7 @@ enable_stdfilesystem(CoreTests)
 
 if(UNIX AND NOT APPLE)
     # This enables symbols in backtraces
-    target_link_libraries(CoreTests "-rdynamic" "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+    target_link_libraries(CoreTests "-rdynamic" "${REALM_WOLFSSL_LIB}")
 endif()
 
 target_include_directories(CoreTests PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}")
@@ -243,18 +243,18 @@ if(REALM_ENABLE_SYNC)
 
     add_library(SyncTestLib OBJECT ${SYNC_TESTS} ${SYNC_TEST_HEADERS} ${SYNC_TEST_RESOURCES})
     enable_stdfilesystem(SyncTestLib)
-    target_link_libraries(SyncTestLib Sync SyncServer Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+    target_link_libraries(SyncTestLib Sync SyncServer Storage "${REALM_WOLFSSL_LIB}")
 
     add_executable(SyncTests main.cpp test_all.cpp ${SYNC_TEST_RESOURCES})
     set_target_properties(SyncTests PROPERTIES OUTPUT_NAME "realm-sync-tests")
     set_target_resources(SyncTests "${SYNC_TEST_RESOURCES}")
     enable_stdfilesystem(SyncTests)
-    target_link_libraries(SyncTests SyncTestLib TestUtil "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+    target_link_libraries(SyncTests SyncTestLib TestUtil "${REALM_WOLFSSL_LIB}")
     add_bundled_test(SyncTests)
 
     if(UNIX AND NOT APPLE)
         # This enables symbols in backtraces
-        target_link_libraries(SyncTests "-rdynamic" "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+        target_link_libraries(SyncTests "-rdynamic" "${REALM_WOLFSSL_LIB}")
     endif()
 endif()
 
@@ -275,15 +275,15 @@ if(WINDOWS_STORE)
 endif()
 
 if(REALM_ENABLE_SYNC)
-    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib SyncTestLib TestUtil "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib SyncTestLib TestUtil "${REALM_WOLFSSL_LIB}")
 else()
-    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib TestUtil "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib TestUtil "${REALM_WOLFSSL_LIB}")
 endif()
 
 enable_stdfilesystem(CombinedTests)
 
 if(UNIX AND NOT APPLE)
     # This enables symbols in backtraces
-    target_link_libraries(CombinedTests "-rdynamic" "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+    target_link_libraries(CombinedTests "-rdynamic" "${REALM_WOLFSSL_LIB}")
 endif()
 
diff --git a/test/util/CMakeLists.txt b/test/util/CMakeLists.txt
index 9dc11aa39f4..167964423bb 100644
--- a/test/util/CMakeLists.txt
+++ b/test/util/CMakeLists.txt
@@ -56,14 +56,14 @@ if(REALM_ENABLE_SYNC)
     )
 endif()
 
-add_library(TestUtil STATIC ${TEST_UTIL_SOURCES} ${TEST_UTIL_HEADERS} "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+add_library(TestUtil STATIC ${TEST_UTIL_SOURCES} ${TEST_UTIL_HEADERS} "${REALM_WOLFSSL_LIB}")
 
-target_link_libraries(TestUtil Storage "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+target_link_libraries(TestUtil Storage "${REALM_WOLFSSL_LIB}")
 
 if(UNIX AND NOT APPLE)
     find_library(LIBRT rt)
     if(LIBRT)
-        target_link_libraries(TestUtil ${LIBRT} "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a")
+        target_link_libraries(TestUtil ${LIBRT} "${REALM_WOLFSSL_LIB}")
     # Android has librt included in libc
     elseif(NOT ANDROID)
         message(WARNING "librt was not found. This means that the benchmarks will not be able to link properly.")

From fd7e98055e2275729c4c980de51127255df8a273 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Fri, 8 Nov 2024 14:39:24 -0800
Subject: [PATCH 20/29] tidy up benchmark common tasks cmake

---
 test/benchmark-common-tasks/CMakeLists.txt | 13 ++++++++-----
 1 file changed, 8 insertions(+), 5 deletions(-)

diff --git a/test/benchmark-common-tasks/CMakeLists.txt b/test/benchmark-common-tasks/CMakeLists.txt
index 1985143a7c0..5f3a0887305 100644
--- a/test/benchmark-common-tasks/CMakeLists.txt
+++ b/test/benchmark-common-tasks/CMakeLists.txt
@@ -1,13 +1,16 @@
+add_executable(realm-benchmark-common-tasks main.cpp)
+
 if(REALM_HAVE_WOLFSSL)
 	message(STATUS "benchmark common tasks cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+	include_directories("${REALM_WOLFSSL_ROOT_DIR}/include")
+	link_directories("${REALM_WOLFSSL_ROOT_DIR}/lib")
+	find_library(WOLFSSL_LIB NAMES wolfssl PATHS "${REALM_WOLFSSL_ROOT_DIR}/lib")
+	message(status "WOLFSSL_LIB:${WOLFSSL_LIB}")
 else()
+	set(WOLFSSL_LIB, "")
     message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
 endif()
 
-add_executable(realm-benchmark-common-tasks main.cpp)
-include_directories("${REALM_WOLFSSL_ROOT_DIR}/include")
-link_directories("${REALM_WOLFSSL_ROOT_DIR}/lib")
-find_library(WOLFSSL_LIB NAMES wolfssl PATHS "${REALM_WOLFSSL_ROOT_DIR}/lib")
-target_link_libraries(realm-benchmark-common-tasks TestUtil QueryParser  ${WOLFSSL_LIB})
+target_link_libraries(realm-benchmark-common-tasks TestUtil QueryParser ${WOLFSSL_LIB})
 
 add_dependencies(benchmarks realm-benchmark-common-tasks)

From d9669b201356149e2ac0b75318ddc8a14c54ac30 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Fri, 8 Nov 2024 16:07:19 -0800
Subject: [PATCH 21/29] remove last of hard coded paths

---
 CMakeLists.txt                      |  8 ++++----
 src/realm/sync/tools/CMakeLists.txt | 16 +++++-----------
 2 files changed, 9 insertions(+), 15 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7f8a8e590af..67a84ca001b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -379,13 +379,13 @@ include_directories(${CMAKE_CURRENT_BINARY_DIR}/src) # For generated files (like
 
 if (REALM_HAVE_WOLFSSL)
     message(STATUS "Found REALM_HAVE_WOLFSSL")
-    include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr")
-    include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr/wolfcrypt")
+    message(STATUS "This REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+    message(STATUS "This RealmCore_SOURCE_DIR=${RealmCore_SOURCE_DIR}")
+    include_directories("${REALM_WOLFSSL_ROOT_DIR}/include")
 endif()
 
 # TODO fix hard coded paths
-include_directories("/mnt/c/workspace/osp-gojimmypi/realm/realm-core-gojimmypi/src")
-include_directories("/mnt/c/workspace/osp-gojimmypi/realm/realm-core-gojimmypi/src/realm/object-store/c_api")
+# include_directories("${RealmCore_SOURCE_DIR}/src/realm/object-store/c_api")
 
 add_subdirectory(src)
 add_subdirectory(bindgen)
diff --git a/src/realm/sync/tools/CMakeLists.txt b/src/realm/sync/tools/CMakeLists.txt
index 053044326ae..030c532c1f2 100644
--- a/src/realm/sync/tools/CMakeLists.txt
+++ b/src/realm/sync/tools/CMakeLists.txt
@@ -2,21 +2,15 @@ if(REALM_HAVE_WOLFSSL)
     message(STATUS "tools cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
     message(STATUS "Found REALM_HAVE_WOLFSSL")
 
-    include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr")
-    include_directories("/mnt/c/workspace/wolfssl-gojimmypi-pr/wolfcrypt")
+    link_directories("${REALM_WOLFSSL_ROOT_DIR}/")
+    link_directories("${REALM_WOLFSSL_ROOT_DIR}/lib")
+
+    include_directories("${REALM_WOLFSSL_ROOT_DIR}/include")
 else()
     message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
+    set(REALM_WOLFSSL_LIB "")
 endif()
 
-# TODO fix hard coded paths
-include_directories("/mnt/c/workspace/osp-gojimmypi/realm/realm-core-gojimmypi/src")
-include_directories("/mnt/c/workspace/osp-gojimmypi/realm/realm-core-gojimmypi/src/realm/object-store/c_api")
-
-link_directories("${REALM_WOLFSSL_ROOT_DIR}/") # Adjust as needed for the exact path to the compiled libwolfssl.a or libwolfssl.so
-
-include_directories("${REALM_WOLFSSL_ROOT_DIR}/include")
-link_directories("${REALM_WOLFSSL_ROOT_DIR}/lib")
-
 add_executable(InspectorInspectClientRealm "inspect_client_realm.cpp")
 set_target_properties(InspectorInspectClientRealm PROPERTIES
                       OUTPUT_NAME "realm-inspect-client-realm"

From 57b916f5469db662fbd2da556e2fceaef4470bb2 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Fri, 8 Nov 2024 17:13:33 -0800
Subject: [PATCH 22/29] explicitly clear REALM_WOLFSSL_LIB when not
 REALM_HAVE_WOLFSSL

---
 src/realm/exec/CMakeLists.txt | 2 ++
 src/realm/sync/CMakeLists.txt | 3 ++-
 test/CMakeLists.txt           | 5 +++--
 test/util/CMakeLists.txt      | 1 +
 4 files changed, 8 insertions(+), 3 deletions(-)

diff --git a/src/realm/exec/CMakeLists.txt b/src/realm/exec/CMakeLists.txt
index 9291b99a6b9..70da2d39871 100644
--- a/src/realm/exec/CMakeLists.txt
+++ b/src/realm/exec/CMakeLists.txt
@@ -2,8 +2,10 @@ if(REALM_HAVE_WOLFSSL)
     message(STATUS "exec cmake: ${REALM_WOLFSSL_ROOT_DIR}")
     message(STATUS "REALM_WOLFSSL_LIB=${REALM_WOLFSSL_LIB}")
 else()
+    set(REALM_WOLFSSL_LIB "")
     message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
 endif()
+
 add_executable(RealmImporter importer_tool.cpp importer.cpp importer.hpp)
 set_target_properties(RealmImporter PROPERTIES
     OUTPUT_NAME "realm-importer"
diff --git a/src/realm/sync/CMakeLists.txt b/src/realm/sync/CMakeLists.txt
index 9b5b4797f1a..fed62ea82f9 100644
--- a/src/realm/sync/CMakeLists.txt
+++ b/src/realm/sync/CMakeLists.txt
@@ -1,6 +1,7 @@
 if(REALM_HAVE_WOLFSSL)
     message(STATUS "sync cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
 else()
+    set(REALM_WOLFSSL_LIB "")
     message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
 endif()
 
@@ -110,7 +111,7 @@ target_link_libraries(Sync PUBLIC Storage)
 if(APPLE AND NOT REALM_FORCE_OPENSSL)
     target_link_options(Sync INTERFACE "SHELL:-framework Security")
 elseif(REALM_HAVE_WOLFSSL)
-    message(STATUS "REALM_HAVE_WOLFSSL")
+    message(STATUS "Sync found REALM_HAVE_WOLFSSL")
     target_link_libraries(Sync PUBLIC "${REALM_WOLFSSL_LIB}")
 elseif(REALM_HAVE_OPENSSL)
     message(STATUS "Sync found REALM_HAVE_OPENSSL")
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 3e0129cc866..088091f9419 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -1,15 +1,16 @@
 
 if(REALM_HAVE_WOLFSSL)
     message(STATUS "test cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+    include_directories("${REALM_WOLFSSL_ROOT_DIR}/include")
+    link_directories("${REALM_WOLFSSL_ROOT_DIR}/lib")
 else()
+    set(REALM_WOLFSSL_LIB "")
     message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
 endif()
 
 add_subdirectory(util)
 add_custom_target(benchmarks)
 add_subdirectory(object-store)
-include_directories("${REALM_WOLFSSL_ROOT_DIR}/include")
-link_directories("${REALM_WOLFSSL_ROOT_DIR}/lib")
 
 # AFL and LIBFUZZER not yet supported by Windows
 if(NOT CMAKE_SYSTEM_NAME MATCHES "^Windows" AND NOT EMSCRIPTEN AND NOT ANDROID)
diff --git a/test/util/CMakeLists.txt b/test/util/CMakeLists.txt
index 167964423bb..40102be5d69 100644
--- a/test/util/CMakeLists.txt
+++ b/test/util/CMakeLists.txt
@@ -1,6 +1,7 @@
 if(REALM_HAVE_WOLFSSL)
     message(STATUS "util cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
 else()
+    set(REALM_WOLFSSL_LIB "")
     message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
 endif()
 

From 59ac1fc60a7ba1492b6395900dd0e72a53d01040 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Fri, 8 Nov 2024 17:15:47 -0800
Subject: [PATCH 23/29] SHA2 warning for WIN32, add wolfSSL WIN32 check

---
 src/realm/CMakeLists.txt | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/realm/CMakeLists.txt b/src/realm/CMakeLists.txt
index fa60fcd46d8..9656d8ff8fe 100644
--- a/src/realm/CMakeLists.txt
+++ b/src/realm/CMakeLists.txt
@@ -349,7 +349,8 @@ endif()
 # On systems without a built-in SHA-2 implementation (or one provided by a dependency)
 # we need to bundle the public domain implementation.
 # Note: This is also used on Windows because Windows lacks a native SHA224 hash needed for realm encryption
-if((NOT APPLE AND NOT REALM_HAVE_OPENSSL AND NOT REALM_HAVE_WOLFSSL) OR WIN32)
+if((NOT APPLE AND NOT REALM_HAVE_OPENSSL AND NOT REALM_HAVE_WOLFSSL) OR (WIN32 AND NOT REALM_HAVE_WOLFSSL))
+    message(STATUS "Warning: using external/sha-2 library")
     add_library(sha2 OBJECT ../external/sha-2/sha224.cpp ../external/sha-2/sha256.cpp)
     target_include_directories(Storage PRIVATE ../external/sha-2)
     target_sources(Storage PRIVATE $<TARGET_OBJECTS:sha2>)
@@ -379,6 +380,7 @@ if(TARGET Backtrace::Backtrace)
 endif()
 
 if(REALM_ENABLE_ENCRYPTION AND UNIX AND NOT APPLE AND (REALM_HAVE_OPENSSL OR REALM_HAVE_WOLFSSL))
+    message(STATUS "REALM_ENABLE_ENCRYPTION UNIX enabled")
     if (REALM_HAVE_WOLFSSL)
         target_link_libraries(Storage PUBLIC "${REALM_WOLFSSL_LIB}")
     elseif (REALM_HAVE_OPENSSL)

From f12336cbc669882afeee2f83ba429b750e31529d Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Mon, 11 Nov 2024 17:10:11 -0800
Subject: [PATCH 24/29] use find_library, tidy cmake, add diagnostic messages

---
 CMakeLists.txt                             |  9 ++++++++-
 test/CMakeLists.txt                        |  4 +++-
 test/benchmark-common-tasks/CMakeLists.txt | 12 +++++-------
 3 files changed, 16 insertions(+), 9 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 67a84ca001b..da9473e2e0c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -306,9 +306,16 @@ elseif(REALM_ENABLE_ENCRYPTION AND CMAKE_SYSTEM_NAME MATCHES "Linux|Android")
 endif()
 
 if(REALM_HAVE_WOLFSSL)
+    if(REALM_INCLUDE_CERTS)
+        message(STATUS "Found REALM_INCLUDE_CERTS")
+    endif()
+    if(REALM_ENABLE_SYNC)
+        message(STATUS "Found REALM_ENABLE_SYNC")
+        option(REALM_INCLUDE_CERTS "Include a list of trust certificates in the build for OpenSSL certificate verification" ON)
+    endif()
     # Allow users to specify their wolfSSL installation directory
     message(STATUS "Main cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
-    set(REALM_WOLFSSL_LIB "${REALM_WOLFSSL_ROOT_DIR}/lib/libwolfssl.a" CACHE PATH "Path to the wolfSSL installation directory")
+    find_library(REALM_WOLFSSL_LIB NAMES wolfssl PATHS "${REALM_WOLFSSL_ROOT_DIR}/lib")
     message(STATUS "REALM_WOLFSSL_LIB=${REALM_WOLFSSL_LIB}")
     if(EXISTS "${REALM_WOLFSSL_LIB}")
         message(STATUS "Found wolfssl lib file: ${REALM_WOLFSSL_LIB}")
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index 088091f9419..903f24f705e 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -150,6 +150,7 @@ file(GLOB REQUIRED_TEST_FILES
 
 add_library(CoreTestLib OBJECT ${CORE_TESTS} ${REQUIRED_TEST_FILES} ${REALM_TEST_HEADERS})
 enable_stdfilesystem(CoreTestLib)
+message(STATUS "CoreTestLib REALM_WOLFSSL_LIB=${REALM_WOLFSSL_LIB}")
 target_link_libraries(CoreTestLib QueryParser "${REALM_WOLFSSL_LIB}")
 
 add_executable(CoreTests main.cpp test_all.cpp ${REQUIRED_TEST_FILES})
@@ -246,6 +247,7 @@ if(REALM_ENABLE_SYNC)
     enable_stdfilesystem(SyncTestLib)
     target_link_libraries(SyncTestLib Sync SyncServer Storage "${REALM_WOLFSSL_LIB}")
 
+    message(STATUS "SyncTestLib REALM_WOLFSSL_LIB=${REALM_WOLFSSL_LIB}")
     add_executable(SyncTests main.cpp test_all.cpp ${SYNC_TEST_RESOURCES})
     set_target_properties(SyncTests PROPERTIES OUTPUT_NAME "realm-sync-tests")
     set_target_resources(SyncTests "${SYNC_TEST_RESOURCES}")
@@ -278,7 +280,7 @@ endif()
 if(REALM_ENABLE_SYNC)
     target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib SyncTestLib TestUtil "${REALM_WOLFSSL_LIB}")
 else()
-    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib TestUtil "${REALM_WOLFSSL_LIB}")
+    target_link_libraries(CombinedTests ObjectStoreTestLib CoreTestLib             TestUtil "${REALM_WOLFSSL_LIB}")
 endif()
 
 enable_stdfilesystem(CombinedTests)
diff --git a/test/benchmark-common-tasks/CMakeLists.txt b/test/benchmark-common-tasks/CMakeLists.txt
index 5f3a0887305..5cb0319d086 100644
--- a/test/benchmark-common-tasks/CMakeLists.txt
+++ b/test/benchmark-common-tasks/CMakeLists.txt
@@ -1,16 +1,14 @@
 add_executable(realm-benchmark-common-tasks main.cpp)
 
 if(REALM_HAVE_WOLFSSL)
-	message(STATUS "benchmark common tasks cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
-	include_directories("${REALM_WOLFSSL_ROOT_DIR}/include")
-	link_directories("${REALM_WOLFSSL_ROOT_DIR}/lib")
-	find_library(WOLFSSL_LIB NAMES wolfssl PATHS "${REALM_WOLFSSL_ROOT_DIR}/lib")
-	message(status "WOLFSSL_LIB:${WOLFSSL_LIB}")
+	message(STATUS "benchmark common tasks cmake: ")
+	# set in parent cmake:
+	message(STATUS "Found REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+	message(STATUS "Found REALM_WOLFSSL_LIB=${REALM_WOLFSSL_LIB}")
 else()
-	set(WOLFSSL_LIB, "")
     message(STATUS "WARNING: REALM_HAVE_WOLFSSL not set")
 endif()
 
-target_link_libraries(realm-benchmark-common-tasks TestUtil QueryParser ${WOLFSSL_LIB})
+target_link_libraries(realm-benchmark-common-tasks TestUtil QueryParser ${REALM_WOLFSSL_LIB})
 
 add_dependencies(benchmarks realm-benchmark-common-tasks)

From bcf4b0fbecaa738d88f255b8aeb676225e7448ef Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Mon, 11 Nov 2024 20:05:22 -0800
Subject: [PATCH 25/29] WIP; more REALM_HAVE_WOLFSSL (compiles, working,
 incomplete?)

---
 src/realm/sync/network/network_ssl.cpp | 22 ++++++++++++----------
 src/realm/sync/network/network_ssl.hpp |  9 ++++-----
 2 files changed, 16 insertions(+), 15 deletions(-)

diff --git a/src/realm/sync/network/network_ssl.cpp b/src/realm/sync/network/network_ssl.cpp
index f0b72d80985..a26830bbe47 100644
--- a/src/realm/sync/network/network_ssl.cpp
+++ b/src/realm/sync/network/network_ssl.cpp
@@ -21,9 +21,8 @@
         #include <openssl/ssl.h>
         #include <openssl/conf.h>
         #include <openssl/x509v3.h>
-    #endif
-    #if REALM_HAVE_WOLFSSL
-        // #pragma message "network_ssl.cpp found REALM_HAVE_WOLFSSL"
+    #elif REALM_HAVE_WOLFSSL
+        #pragma message "network_ssl.cpp found REALM_HAVE_WOLFSSL"
         #include <wolfssl/openssl/ssl.h>
         #include <wolfssl/openssl/conf.h>
         #include <wolfssl/openssl/x509v3.h>
@@ -79,8 +78,7 @@ void populate_cert_store_with_included_certs(X509_STORE* store, std::error_code&
 #endif // REALM_INCLUDE_CERTS
 
 
-#if REALM_HAVE_WOLFSSL || \
-    (REALM_HAVE_OPENSSL && (OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)))
+#if REALM_HAVE_WOLFSSL || (REALM_HAVE_OPENSSL && (OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)))
 
 // These must be made to execute before main() is called, i.e., before there is
 // any chance of threads being spawned.
@@ -182,7 +180,7 @@ bool ErrorCategory::equivalent(const std::error_code& ec, int condition) const n
 {
     switch (Errors(condition)) {
         case Errors::tls_handshake_failed:
-#if REALM_HAVE_OPENSSL
+#if REALM_HAVE_OPENSSL || REALM_HAVE_WOLFSSL
             return ec.category() == openssl_error_category;
 #elif REALM_HAVE_SECURE_TRANSPORT
             return ec.category() == secure_transport_error_category;
@@ -209,7 +207,7 @@ const char* OpensslErrorCategory::name() const noexcept
 std::string OpensslErrorCategory::message(int value) const
 {
     const char* message = "Unknown error";
-#if REALM_HAVE_OPENSSL
+#if REALM_HAVE_OPENSSL || REALM_HAVE_WOLFSSL
     if (const char* s = ERR_reason_error_string(value))
         message = s;
 #endif
@@ -275,7 +273,7 @@ std::error_code Stream::shutdown(std::error_code& ec)
 }
 
 
-#if REALM_HAVE_OPENSSL
+#if REALM_HAVE_OPENSSL || REALM_HAVE_WOLFSSL
 
 void Context::ssl_init()
 {
@@ -378,6 +376,7 @@ void Context::ssl_use_verify_file(const std::string& path, std::error_code& ec)
 }
 
 #if REALM_INCLUDE_CERTS
+#pragma message "ssl_use_included_certificate_roots"
 void Context::ssl_use_included_certificate_roots(std::error_code& ec)
 {
     X509_STORE* store = SSL_CTX_get_cert_store(m_ssl_ctx);
@@ -385,7 +384,7 @@ void Context::ssl_use_included_certificate_roots(std::error_code& ec)
 }
 #endif
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER) && !defined(OPENSSL_IS_BORINGSSL)
+#if (OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER) && !defined(OPENSSL_IS_BORINGSSL))
 class Stream::BioMethod {
 public:
     BIO_METHOD* bio_method;
@@ -455,7 +454,7 @@ class Stream::BioMethod {
 Stream::BioMethod Stream::s_bio_method;
 
 
-#if OPENSSL_VERSION_NUMBER < 0x10002000L || defined(LIBRESSL_VERSION_NUMBER)
+#if  REALM_HAVE_WOLFSSL || (OPENSSL_VERSION_NUMBER < 0x10002000L || defined(LIBRESSL_VERSION_NUMBER))
 
 namespace {
 
@@ -1466,6 +1465,9 @@ void Context::ssl_use_default_verify(std::error_code&) {}
 void Context::ssl_use_verify_file(const std::string&, std::error_code&) {}
 
 
+void Context::ssl_use_included_certificate_roots(std::error_code& ec) {}
+
+
 void Stream::ssl_set_verify_mode(VerifyMode, std::error_code&) {}
 
 
diff --git a/src/realm/sync/network/network_ssl.hpp b/src/realm/sync/network/network_ssl.hpp
index 39fca41173a..51ef1d9711f 100644
--- a/src/realm/sync/network/network_ssl.hpp
+++ b/src/realm/sync/network/network_ssl.hpp
@@ -169,7 +169,7 @@ class Context {
     void ssl_use_verify_file(const std::string& path, std::error_code&);
     void ssl_use_included_certificate_roots(std::error_code&);
 
-#if REALM_HAVE_OPENSSL
+#if REALM_HAVE_OPENSSL || REALM_HAVE_WOLFSSL
     SSL_CTX* m_ssl_ctx = nullptr;
 
 #elif REALM_HAVE_SECURE_TRANSPORT
@@ -483,7 +483,7 @@ class Stream {
     std::size_t ssl_read(char* buffer, std::size_t size, std::error_code&, Want& want) noexcept;
     std::size_t ssl_write(const char* data, std::size_t size, std::error_code&, Want& want) noexcept;
 
-#if REALM_HAVE_OPENSSL
+#if REALM_HAVE_OPENSSL || REALM_HAVE_WOLFSSL
     class BioMethod;
     static BioMethod s_bio_method;
     SSL* m_ssl = nullptr;
@@ -617,8 +617,7 @@ inline void Context::use_verify_file(const std::string& path)
 inline void Context::use_included_certificate_roots()
 {
     std::error_code ec;
-// TODO not disabled
-    // ssl_use_included_certificate_roots(ec);
+    ssl_use_included_certificate_roots(ec);
     if (ec) {
         throw std::system_error(ec);
     }
@@ -1015,7 +1014,7 @@ inline Socket& Stream::lowest_layer() noexcept
     return m_tcp_socket;
 }
 
-#if REALM_HAVE_OPENSSL
+#if REALM_HAVE_OPENSSL || REALM_HAVE_WOLFSSL
 
 inline void Stream::ssl_handshake(std::error_code& ec, Want& want) noexcept
 {

From 8822b305177aa3a8a03ef7e490839f28ff4f7084 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Wed, 13 Nov 2024 10:54:21 -0800
Subject: [PATCH 26/29] more wolfSSL conditionals

---
 src/realm/sync/network/network_ssl.cpp    | 3 ++-
 src/realm/util/aes_cryptor.hpp            | 2 +-
 src/realm/util/encrypted_file_mapping.cpp | 4 ++--
 src/realm/util/sha_crypto.cpp             | 9 +++++----
 4 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/src/realm/sync/network/network_ssl.cpp b/src/realm/sync/network/network_ssl.cpp
index a26830bbe47..dfa9a0a488a 100644
--- a/src/realm/sync/network/network_ssl.cpp
+++ b/src/realm/sync/network/network_ssl.cpp
@@ -384,7 +384,8 @@ void Context::ssl_use_included_certificate_roots(std::error_code& ec)
 }
 #endif
 
-#if (OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER) && !defined(OPENSSL_IS_BORINGSSL))
+#if !defined(REALM_HAVE_WOLFSSL) && (OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER) &&       \
+                                 !defined(OPENSSL_IS_BORINGSSL))
 class Stream::BioMethod {
 public:
     BIO_METHOD* bio_method;
diff --git a/src/realm/util/aes_cryptor.hpp b/src/realm/util/aes_cryptor.hpp
index ba0154d11e2..fce6fa99abd 100644
--- a/src/realm/util/aes_cryptor.hpp
+++ b/src/realm/util/aes_cryptor.hpp
@@ -117,7 +117,7 @@ class AESCryptor {
 #if REALM_PLATFORM_APPLE
     CCCryptorRef m_encr;
     CCCryptorRef m_decr;
-#elif defined(_WIN32)
+#elif defined(_WIN32) && !defined(REALM_HAVE_WOLFSSL)
     BCRYPT_KEY_HANDLE m_aes_key_handle;
 #else
     EVP_CIPHER_CTX* m_ctx;
diff --git a/src/realm/util/encrypted_file_mapping.cpp b/src/realm/util/encrypted_file_mapping.cpp
index c219af909c0..adaf0795fef 100644
--- a/src/realm/util/encrypted_file_mapping.cpp
+++ b/src/realm/util/encrypted_file_mapping.cpp
@@ -168,7 +168,7 @@ AESCryptor::AESCryptor(const uint8_t* key)
     void* iv = u_iv;
     CCCryptorCreate(kCCEncrypt, kCCAlgorithmAES, 0 /* options */, key, kCCKeySizeAES256, iv, &m_encr);
     CCCryptorCreate(kCCDecrypt, kCCAlgorithmAES, 0 /* options */, key, kCCKeySizeAES256, iv, &m_decr);
-#elif defined(_WIN32)
+#elif defined(_WIN32) && !defined(REALM_HAVE_WOLFSSL)
     BCRYPT_ALG_HANDLE hAesAlg = NULL;
     int ret;
     ret = BCryptOpenAlgorithmProvider(&hAesAlg, BCRYPT_AES_ALGORITHM, NULL, 0);
@@ -528,7 +528,7 @@ void AESCryptor::crypt(EncryptionMode mode, off_t pos, char* dst, const char* sr
     CCCryptorStatus err = CCCryptorUpdate(cryptor, src, block_size, dst, block_size, &bytesEncrypted);
     REALM_ASSERT(err == kCCSuccess);
     REALM_ASSERT(bytesEncrypted == block_size);
-#elif defined(_WIN32)
+#elif defined(_WIN32) && !defined(REALM_HAVE_WOLFSSL)
     ULONG cbData;
     int i;
 
diff --git a/src/realm/util/sha_crypto.cpp b/src/realm/util/sha_crypto.cpp
index 962ccb9352e..29aaf234ae9 100644
--- a/src/realm/util/sha_crypto.cpp
+++ b/src/realm/util/sha_crypto.cpp
@@ -22,7 +22,7 @@
 
 #if REALM_PLATFORM_APPLE
     #include <CommonCrypto/CommonCrypto.h>
-#elif defined(_WIN32)
+#elif defined(_WIN32) && !defined(REALM_HAVE_WOLFSSL)
     #include <windows.h>
     #include <stdio.h>
     #include <bcrypt.h>
@@ -68,7 +68,8 @@ namespace {
 // guarantees that out_buffer is large enough, which is always possible for
 // message digests with a maximum output size.
 #if REALM_PLATFORM_APPLE
-#elif defined(_WIN32)
+    /* nothing ? */
+#elif defined(_WIN32) && !defined(REALM_HAVE_WOLFSSL)
 struct Algorithm {
     Algorithm(LPCWSTR alg_id)
     {
@@ -193,7 +194,7 @@ void sha1(const char* in_buffer, size_t in_buffer_size, unsigned char* out_buffe
 {
 #if REALM_PLATFORM_APPLE
     CC_SHA1(in_buffer, CC_LONG(in_buffer_size), out_buffer);
-#elif defined(_WIN32)
+#elif defined(_WIN32) && !defined(REALM_HAVE_WOLFSSL)
     Algorithm alg(BCRYPT_SHA1_ALGORITHM);
     Hash hash(alg, 20);
     hash.get_hash(reinterpret_cast<PUCHAR>(const_cast<char*>(in_buffer)), DWORD(in_buffer_size), out_buffer);
@@ -216,7 +217,7 @@ void sha256(const char* in_buffer, size_t in_buffer_size, unsigned char* out_buf
 {
 #if REALM_PLATFORM_APPLE
     CC_SHA256(in_buffer, CC_LONG(in_buffer_size), out_buffer);
-#elif defined(_WIN32)
+#elif defined(_WIN32) && !defined(REALM_HAVE_WOLFSSL)
     Algorithm alg(BCRYPT_SHA256_ALGORITHM);
     Hash hash(alg, 32);
     hash.get_hash(reinterpret_cast<PUCHAR>(const_cast<char*>(in_buffer)), DWORD(in_buffer_size), out_buffer);

From 5a0ef30430473645ac84a6d35a0218872f1b7df4 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Wed, 13 Nov 2024 10:55:07 -0800
Subject: [PATCH 27/29] ignore all .vs directories, bak files

---
 .gitignore | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/.gitignore b/.gitignore
index 4406de92807..f609deef293 100644
--- a/.gitignore
+++ b/.gitignore
@@ -38,7 +38,7 @@ CMakeScripts
 Thumbs.db
 
 # Ignore files build by Visual Studio
-/.vs
+**/.vs
 /Visual\ Studio
 
 # Ignore user-local configuration for Visual Studio Code
@@ -113,3 +113,6 @@ ssh_agent_commands.sh
 
 # Ignore breadcrumb / semaphore files
 /REALM_CORE_COMMIT_COMPLETE.log
+
+*.bak
+

From 9d298b90569b29ae07e81168828f515f82193799 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Wed, 13 Nov 2024 10:56:44 -0800
Subject: [PATCH 28/29] Visual Studio settings

---
 CMakeLists.txt           | 16 ++++++++++++++++
 test/util/CMakeLists.txt |  3 +++
 2 files changed, 19 insertions(+)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index da9473e2e0c..439ce4b3639 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,16 @@
 cmake_minimum_required(VERSION 3.15)
+
+if("${CMAKE_GENERATOR}" MATCHES "Visual Studio")
+    message(STATUS "Visual Studio Build")
+    add_compile_definitions(WOLFSSL_LIB)
+    add_compile_definitions(WOLFSSL_USER_SETTINGS)
+    option(REALM_INCLUDE_CERTS "Include certs in Realm" ON)
+    option(REALM_ENABLE_ENCRYPTION "Enable encryption in Realm" ON)
+    option(REALM_ENABLE_SYNC "Enable sync in Realm" ON)
+    option(REALM_HAVE_WOLFSSL "Enable wolfSSL in Realm" OFF)
+   #  set(REALM_WOLFSSL_ROOT_DIR "/workspace/wolfssl/out/build/x64-Debug" CACHE PATH "Path to the wolfSSL root directory")
+endif()
+
 message(STATUS "CMake version: ${CMAKE_VERSION}")
 set(CMAKE_SYSTEM_VERSION 10.0.22621.0)
 set(CMAKE_BUILD_TYPE Debug CACHE STRING "")
@@ -315,7 +327,11 @@ if(REALM_HAVE_WOLFSSL)
     endif()
     # Allow users to specify their wolfSSL installation directory
     message(STATUS "Main cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
+if("${CMAKE_GENERATOR}" MATCHES "Visual Studio")
+    find_library(REALM_WOLFSSL_LIB NAMES wolfssl PATHS "${REALM_WOLFSSL_ROOT_DIR}")
+else()
     find_library(REALM_WOLFSSL_LIB NAMES wolfssl PATHS "${REALM_WOLFSSL_ROOT_DIR}/lib")
+endif()
     message(STATUS "REALM_WOLFSSL_LIB=${REALM_WOLFSSL_LIB}")
     if(EXISTS "${REALM_WOLFSSL_LIB}")
         message(STATUS "Found wolfssl lib file: ${REALM_WOLFSSL_LIB}")
diff --git a/test/util/CMakeLists.txt b/test/util/CMakeLists.txt
index 40102be5d69..d59848e466a 100644
--- a/test/util/CMakeLists.txt
+++ b/test/util/CMakeLists.txt
@@ -1,3 +1,6 @@
+  #  set(REALM_WOLFSSL_ROOT_DIR "/workspace/wolfssl-gojimmypi-pr/DLL Release/x64" CACHE PATH "Path to the wolfSSL root directory")
+
+  set(REALM_WOLFSSL_ROOT_DIR "/workspace/wolfssl/Debug/x64" CACHE PATH "Path to the wolfSSL root directory")
 if(REALM_HAVE_WOLFSSL)
     message(STATUS "util cmake: REALM_WOLFSSL_ROOT_DIR=${REALM_WOLFSSL_ROOT_DIR}")
 else()

From f464aa41210c5f33e8c811c9da557a85a9128ad2 Mon Sep 17 00:00:00 2001
From: gojimmypi <jim@wolfssl.com>
Date: Wed, 13 Nov 2024 10:57:05 -0800
Subject: [PATCH 29/29] remove pragma message breadcrumbs

---
 src/realm/sync/network/network_ssl.cpp | 4 ++--
 src/realm/util/sha_crypto.cpp          | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/realm/sync/network/network_ssl.cpp b/src/realm/sync/network/network_ssl.cpp
index dfa9a0a488a..67d270565fa 100644
--- a/src/realm/sync/network/network_ssl.cpp
+++ b/src/realm/sync/network/network_ssl.cpp
@@ -22,7 +22,7 @@
         #include <openssl/conf.h>
         #include <openssl/x509v3.h>
     #elif REALM_HAVE_WOLFSSL
-        #pragma message "network_ssl.cpp found REALM_HAVE_WOLFSSL"
+        // #pragma message "network_ssl.cpp found REALM_HAVE_WOLFSSL"
         #include <wolfssl/openssl/ssl.h>
         #include <wolfssl/openssl/conf.h>
         #include <wolfssl/openssl/x509v3.h>
@@ -376,7 +376,7 @@ void Context::ssl_use_verify_file(const std::string& path, std::error_code& ec)
 }
 
 #if REALM_INCLUDE_CERTS
-#pragma message "ssl_use_included_certificate_roots"
+// #pragma message "ssl_use_included_certificate_roots"
 void Context::ssl_use_included_certificate_roots(std::error_code& ec)
 {
     X509_STORE* store = SSL_CTX_get_cert_store(m_ssl_ctx);
diff --git a/src/realm/util/sha_crypto.cpp b/src/realm/util/sha_crypto.cpp
index 29aaf234ae9..13b1c201062 100644
--- a/src/realm/util/sha_crypto.cpp
+++ b/src/realm/util/sha_crypto.cpp
@@ -33,7 +33,7 @@
     #include <openssl/evp.h>
     #include <openssl/hmac.h>
 #elif REALM_HAVE_WOLFSSL
-    #pragma message "REALM_HAVE_WOLFSSL in sha_crypto"
+    // #pragma message "REALM_HAVE_WOLFSSL in sha_crypto"
     #ifdef HAVE_CONFIG_H
         #include <config.h>
     #endif
@@ -45,7 +45,7 @@
     #ifndef WOLFSSL_EVP_INCLUDED
         #error "WOLFSSL_EVP_INCLUDED needed"
     #else
-        #pragma message "sha_crypto WOLFSSL_EVP_INCLUDED"
+       // #pragma message "sha_crypto WOLFSSL_EVP_INCLUDED"
     #endif
     #include <wolfssl/openssl/sha.h>
     #include <wolfssl/openssl/evp.h>
